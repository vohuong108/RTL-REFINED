<?xml version="1.0" encoding="UTF-8"?>
<?use version="5.2.0"?>
<plugin name="ModelValidatorPlugin" version="5.2.0-r1" publisher="Hendrik Reitmann">
	<actions>
		<action label="Kodkod Validation"
			icon="resources/kodkod.png"
			class="org.tzi.use.kodkod.plugin.KodkodValidatePropertyAction"
			tooltip="Choose a properties file and validate the current model."
			menu="Model Validator"
			menuitem="Validation"
			toolbaritem="plugins"
			id="org.tzi.use.kodkod.plugin.KodkodValidatePropertyAction">
		</action>
		<action label="Kodkod Configuration"
			icon="resources/kodkod-gui.png"
			class="org.tzi.use.kodkod.plugin.KodkodValidateConfigurationAction"
			tooltip="Create a configuration and validate the current model."
			menu="Model Validator"
			menuitem="Configuration"
			toolbaritem="plugins"
			id="org.tzi.use.kodkod.plugin.KodkodValidateConfigurationAction">
		</action>
	</actions>
	<commands>
		<command id="org.tzi.use.kodkod.plugin.KodkodValidateCmd"
			class="org.tzi.use.kodkod.plugin.KodkodValidateCmd"
			help="Validates the model using the model validator. A path to a configuration file can be specified. If no path is given, a generic configuration file will be created in the directory of the current USE specification."
			label="KodkodValidateCmd"
			shellcmd="modelvalidator -validate"
			alias="mv -validate">
		</command>
		<command id="org.tzi.use.kodkod.plugin.InvariantIndepCmd"
			class="org.tzi.use.kodkod.plugin.InvariantIndepCmd"
			help="Checks if each OCL invariant is independent. An optionally given invariant name restricts the check to the corresponding invariant."
			label="InvariantIndepCmd"
			shellcmd="modelvalidator -invIndep"
			alias="mv -invIndep">
		</command>
		<command id="org.tzi.use.kodkod.plugin.ConfigurationCmd"
			class="org.tzi.use.kodkod.plugin.ConfigurationCmd"
			help="Configures basic Kodkod properties. Possible parameters (case sensitive): 'satsolver:=[DefaultSAT4J|LightSAT4J|Lingeling|plingeling|MiniSat|MiniSatProver|ZChaffMincost|CryptoMiniSat]' selects the sat solver to be used (some solvers need to be installed manually); 'bitwidth:=i' sets the solver bitwidth; 'automaticDiagramExtraction:=[on|off]' determines if the current object diagram should be used as partial solution; 'save' saves the configuration"
			label="ConfigurationCmd"
			shellcmd="modelvalidator -config"
			alias="mv -config">
		</command>		
		<command id="org.tzi.use.kodkod.plugin.ModelResetCmd"
			class="org.tzi.use.kodkod.plugin.ModelResetCmd"
			help="Resets the configuration and partial solutions."
			label="ModelResetCmd"
			shellcmd="modelvalidator -modelReset"
			alias="mv -modelReset">
		</command>
		<command id="org.tzi.use.kodkod.plugin.KodkodScrollingValidateCmd"
			class="org.tzi.use.kodkod.plugin.KodkodScrollingValidateCmd"
			help="Paging of all solutions for a configured search space. Parameters: 'next' or 'previous' for the next or previous solution; 'show(i)' selects the ith solution."
			label="KodkodScrollingValidateCmd"
			shellcmd="modelvalidator -scrolling"
			alias="mv -scrolling">
		</command>
		<command id="org.tzi.use.kodkod.plugin.KodkodScrollingAllValidateCmd"
			class="org.tzi.use.kodkod.plugin.KodkodScrollingAllValidateCmd"
			help="Similar to -scrolling, but collects (and counts) all available solutions in advance."
			label="KodkodScrollingAllValidateCmd"
			shellcmd="modelvalidator -scrollingAll"
			alias="mv -scrollingAll">
		</command>
		<command id="org.tzi.use.kodkod.plugin.KodkodCTScrollingValidateCmd"
			class="org.tzi.use.kodkod.plugin.KodkodCTScrollingValidateCmd"
			help="Paging of all solutions for a configured search space. Parameters: 'next' or 'previous' for the next or previous solution; 'show(i)' selects the ith solution."
			label="KodkodCTScrollingValidateCmd"
			shellcmd="modelvalidator -scrollingCT"
			alias="mv -scrollingCT">
		</command>
		<command id="org.tzi.use.kodkod.plugin.KodkodCTScrollingAllValidateCmd"
			class="org.tzi.use.kodkod.plugin.KodkodCTScrollingAllValidateCmd"
			help="Similar to -scrollingCT, but collects (and counts) all available solutions in advance."
			label="KodkodCTScrollingAllValidateCmd"
			shellcmd="modelvalidator -scrollingAllCT"
			alias="mv -scrollingAllCT">
		</command>
		<command id="org.tzi.use.kodkod.plugin.KodkodQueryCmd"
			class="org.tzi.use.kodkod.plugin.KodkodQueryCmd"
			help="internal (OCL expressions are evaluated in the context of the relational solution.)"
			label="KodkodQueryCmd"
			shellcmd="modelvalidator ?"
			alias="mv ?">
		</command>
		<command id="org.tzi.use.kodkod.plugin.SolverDownloadCmd"
			class="org.tzi.use.kodkod.plugin.SolverDownloadCmd"
			help="Downloads and installs external solver libraries such as MiniSat and lingeling depending on the compatibilities with the system"
			label="SolverDownloadCmd"
			shellcmd="modelvalidator -downloadSolvers"
			alias="mv -dl">
		</command>
		<command id="org.tzi.use.kodkod.plugin.ConfigurationComparisonCmd"
			class="org.tzi.use.kodkod.plugin.ConfigurationComparisonCmd"
			help="Compares configurations for the model validator regarding the model. A path to a configuration file must be specified. In the following, selected configurations from the file can be specified by name. If no names are given, all configurations will be compared."
			label="ConfigurationComparisonCmd"
			shellcmd="modelvalidator -compareConfig"
			alias="mv -cc">
		</command>
		<command id="org.tzi.use.kodkod.plugin.ConfigurationValidationCmd"
			class="org.tzi.use.kodkod.plugin.ConfigurationValidationCmd"
			help="Validates configurations for the model validator regarding the model. A path to a configuration file must be specified. In the following, selected configurations from the file can be specified by name. If no names are given, all configurations will be validated."
			label="ConfigurationValidationCmd"
			shellcmd="modelvalidator -validateConfig"
			alias="mv -vc">
		</command>
		<command id="org.tzi.use.kodkod.plugin.ConfigurationValidationInteractiveFixingCmd"
			class="org.tzi.use.kodkod.plugin.ConfigurationValidationInteractiveFixingCmd"
			help="Validates a configuration for the model validator regarding the model and allows the application of proposed modifications. A path to a configuration file must be specified. A name of a configuration must be specified."
			label="ConfigurationValidationInteractiveFixingCmd"
			shellcmd="modelvalidator -fixConfig"
			alias="mv -fc">
		</command>
		<command id="org.tzi.use.kodkod.plugin.CleverConfigurationGenerationCmd"
			class="org.tzi.use.kodkod.plugin.CleverConfigurationGenerationCmd"
			help="Creates a configuration for the model validator regarding the model. Bounds tightening is processed on the specified initial bounds for model elements. A path for the generated configuration file to be safed must be specified. The option '--respectOclConstraints' or '-roc' involves the model invariants in the process. The option '--mandatorizeAttributes' or '-ma' sets all attribute lower bounds to -1. The option '--generalizeAttributeUpperBounds' or '-gab' sets all attribute upper bounds to -1 if they are larger than or equal the upper bound of their owning class. Options can be specified after the path. Then the general lower and upper bound for configuration aspects must be specified. Optionally more specific intitial bounds can be specified with '$option$.[$lb$,$ub$]'. General bounds for types of model elements can be specified with values 'Classes', 'Attributes' and 'Associations' as '$option$'. Precise bounds for model elements can be specified with 'Class.$name$' as '$option$' for a class, with 'Class.$name$.Attribute.$name$' as '$option$' for an attribute and 'Association.$name$' as '$option$' for association. 'name' must be replaced by the model elements name."
			label="CleverConfigurationGenerationCmd"
			shellcmd="modelvalidator -createSmartConfig"
			alias="mv -csc">
		</command>
	</commands>
</plugin>