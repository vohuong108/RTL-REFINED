model BuyTicketModel

enum RejnStep {
  step3a2_rejn_step3_1
 };

class step1_act_BuyTicketOpC < BuyTicketOpC
end

class matchPara4step3_act_BuyTicketOpC < BuyTicketOpC
end

association Filmstrip between
  Snapshot[0..1] role pred
  Snapshot[0..1] role succ
  OperationCall[0..1]
end

aggregation PredSuccCustomer between
  Customer[0..1] role predCustomer
  Customer[0..1] role succCustomer
end

class step4_sys_BuyTicketOpC < BuyTicketOpC
end

abstract class OperationCall
operations
  pred() : Snapshot = 
    if (self.pred->size() = 1) then self.pred->any( $elem0:Snapshot | true ) else null endif
  succ() : Snapshot = 
    if (self.succ->size() = 1) then self.succ->any( $elem0:Snapshot | true ) else null endif
end

composition SnapshotCustomer between
  Snapshot[1] role snapshotCustomer
  Customer[*]
end

class matchPara4step4_sys_BuyTicketOpC < BuyTicketOpC
end

aggregation PredSuccTicket between
  Ticket[0..1] role predTicket
  Ticket[0..1] role succTicket
end

aggregation PredSuccBuyTicket between
  BuyTicket[0..1] role predBuyTicket
  BuyTicket[0..1] role succBuyTicket
end

class matchPara4step2_sys_BuyTicketOpC < BuyTicketOpC
end

abstract class BuyTicketOpC < OperationCall
attributes
  aSelf : BuyTicket
end

class step3_act_BuyTicketOpC < BuyTicketOpC
end

composition SnapshotTicket between
  Snapshot[1] role snapshotTicket
  Ticket[*]
end

class Snapshot
operations
  copy() : Snapshot
    begin
      declare s : Snapshot;
      s := new Snapshot;
      for cl in self.buyTicket do 
        declare x : BuyTicket;
        x := new BuyTicket;
        insert (cl,x) into PredSuccBuyTicket;
        insert (s,x) into SnapshotBuyTicket;
      end;
      for cl in self.customer do 
        declare x : Customer;
        x := new Customer;
        insert (cl,x) into PredSuccCustomer;
        insert (s,x) into SnapshotCustomer;
      end;
      ;
      for cl in self.ticket do 
        declare x : Ticket;
        x := new Ticket;
        insert (cl,x) into PredSuccTicket;
        insert (s,x) into SnapshotTicket;
      end;
      for cl in s.buyTicket do 
        cl.curStep := cl.predBuyTicket.curStep;
        cl.inputId := cl.predBuyTicket.inputId;
        cl.matchedStep := cl.predBuyTicket.matchedStep;
        cl.msg := cl.predBuyTicket.msg;
        cl.ticketIds := cl.predBuyTicket.ticketIds;
      end;
      for cl in s.customer do 
        cl.money := cl.predCustomer.money;
      end;
      for cl in s.ticket do 
        cl.id := cl.predTicket.id;
        cl.value := cl.predTicket.value;
      end;
      for cl in self.buyTicket do 
        if not cl.customer.isUndefined then
          insert (cl.succBuyTicket,cl.customer.succCustomer) into BuyTicket_customer
        end;
        if not cl.avblTickets->isEmpty then
          for elem in cl.avblTickets do 
            insert (cl.succBuyTicket,elem.succTicket) into BuyTicket_avblTickets
          end
        end;
        if not cl.ticket.isUndefined then
          insert (cl.succBuyTicket,cl.ticket.succTicket) into BuyTicket_ticket
        end;
      end;
      for cl in self.customer do 
        if not cl.ticket->isEmpty then
          for elem in cl.ticket do 
            insert (cl.succCustomer,elem.succTicket) into Takes
          end
        end;
      end;
      result := s;
    end
  pred() : Snapshot = 
    if (self.pred->size() = 1) then self.pred->any( $elem0:Snapshot | true ) else null endif
  succ() : Snapshot = 
    if (self.succ->size() = 1) then self.succ->any( $elem0:Snapshot | true ) else null endif
end

class step2_sys_BuyTicketOpC < BuyTicketOpC
end

class step3a1_sys_BuyTicketOpC < BuyTicketOpC
end

composition SnapshotBuyTicket between
  Snapshot[1] role snapshotBuyTicket
  BuyTicket[*]
end

class Customer
attributes
  money : Integer
end

class Ticket
attributes
  id : Integer
  value : Integer
end

class BuyTicket
attributes
  inputId : Integer
  msg : String
  ticketIds : Set(Integer)
  curStep : String
  matchedStep : String
operations
  enter_BuyTicket() : Boolean = 
    (((not self.customer.isUndefined() and not self.ticket.isUndefined()) and self.customer.ticket->excludes(self.ticket)) and (self.curStep = 's0'))
  exit_BuyTicket() : Boolean = 
    (self.customer.ticket->includes(self.ticket) and self.isFinalStep(self.curStep))
  step1_act()
  step2_sys()
  matchPara4step2_sys()
  step3_act()
  matchPara4step3_act()
  step4_sys()
  matchPara4step4_sys()
  step3a_alt()
  step3a1_sys()
  step3a2_rejn_step3_1()
  isFinalStep(stepId : String) : Boolean = 
    Set{'step4_sys', 'step3a2_rejn_step3_1'}->includes(stepId)
  isValidRejnStep(rStepIndex : RejnStep) : Boolean = 
    if (rStepIndex = RejnStep::step3a2_rejn_step3_1) then self.isOK_step3a2_rejn_step3_1() else false endif
  isOK_step3a2_rejn_step3_1() : Boolean = 
    (self.customer.money < self.ticket.value)
  enum2String(rStepIndex : RejnStep) : String = 
    if (rStepIndex = RejnStep::step3a2_rejn_step3_1) then 'step3a2_rejn_step3_1' else 'null' endif
end

association Takes between
  Customer[0..1]
  Ticket[*]
end

association BuyTicket_customer between
  BuyTicket[0..1] role buyTicketCustomer
  Customer[0..1]
end

association BuyTicket_ticket between
  BuyTicket[0..1] role buyTicketTicket
  Ticket[0..1]
end

association BuyTicket_avblTickets between
  BuyTicket[0..1] role buyTicketAvblTickets
  Ticket[*] role avblTickets
end

constraints
context BuyTicket inv validLinkingBuyTicket_avblTickets:
  self.avblTickets->forAll( c:Ticket | (c.snapshotTicket = self.snapshotBuyTicket) )

context BuyTicket inv validLinkingBuyTicket_customer:
  (self.customer.isDefined() implies (self.snapshotBuyTicket = self.customer.snapshotCustomer))

context BuyTicket inv validLinkingBuyTicket_ticket:
  (self.ticket.isDefined() implies (self.snapshotBuyTicket = self.ticket.snapshotTicket))

context BuyTicket inv validSnapshotLinking:
  (self.succBuyTicket.isDefined() implies (self.succBuyTicket.snapshotBuyTicket = self.snapshotBuyTicket.succ()))

context BuyTicketOpC inv aSelfDefined:
  self.aSelf.isDefined()

context BuyTicketOpC inv aSelfInPred:
  (self.aSelf.snapshotBuyTicket = self.pred())

context Customer inv validLinkingTakes:
  self.ticket->forAll( c:Ticket | (c.snapshotTicket = self.snapshotCustomer) )

context Customer inv validSnapshotLinking:
  (self.succCustomer.isDefined() implies (self.succCustomer.snapshotCustomer = self.snapshotCustomer.succ()))

context OperationCall inv assocClassBehavior:
  (((self.pred->size() = 1) and (self.succ->size() = 1)) and OperationCall.allInstances()->forAll( op:OperationCall | (((self.pred = op.pred) and (self.succ = op.succ)) implies (self = op)) ))

context Snapshot inv cycleFree:
  Set{self.succ()}->closure( s:Snapshot | s.succ() )->excludes(self)

context Snapshot inv oneFilmstrip:
  ((Snapshot.allInstances()->select( s:Snapshot | s.pred().isUndefined() )->size() = 1) and (Snapshot.allInstances()->select( s:Snapshot | s.succ().isUndefined() )->size() = 1))

context Ticket inv validSnapshotLinking:
  (self.succTicket.isDefined() implies (self.succTicket.snapshotTicket = self.snapshotTicket.succ()))

context matchPara4step2_sys_BuyTicketOpC inv post_post1:
  ((aSelf.succBuyTicket.avblTickets = self.succ().ticket->select( t:Ticket | t.customer.isUndefined() )) and (aSelf.succBuyTicket.matchedStep = 'step2_sys'))

context matchPara4step2_sys_BuyTicketOpC inv pre_pre1:
  (aSelf.matchedStep = 'null')

context matchPara4step3_act_BuyTicketOpC inv post_post2:
  (not aSelf.succBuyTicket.inputId.isUndefined() and (aSelf.succBuyTicket.matchedStep = 'step3_act'))

context matchPara4step3_act_BuyTicketOpC inv pre_pre2:
  (aSelf.matchedStep = 'null')

context matchPara4step4_sys_BuyTicketOpC inv post_post3:
  (((not aSelf.succBuyTicket.ticket.isUndefined() and aSelf.succBuyTicket.customer.ticket->excludes(aSelf.succBuyTicket.ticket)) and (aSelf.succBuyTicket.ticket.id = aSelf.succBuyTicket.inputId)) and (aSelf.succBuyTicket.matchedStep = 'step4_sys'))

context matchPara4step4_sys_BuyTicketOpC inv pre_pre3:
  (aSelf.matchedStep = 'null')

context step1_act_BuyTicketOpC inv post_nextStep:
  ((aSelf.succBuyTicket.curStep = 'step1_act') and (aSelf.succBuyTicket.matchedStep = 'null'))

context step1_act_BuyTicketOpC inv post_postSnapshot:
  true

context step1_act_BuyTicketOpC inv post_unChangedPart:
  (((((((self.succ().customer - Set{aSelf.succBuyTicket.customer})->forAll( x:Customer | ((x = x) and (x.predCustomer.money = x.money)) ) and self.succ().ticket->forAll( x:Ticket | ((((x = x) and (x.predTicket.id = x.id)) and (x.predTicket.value = x.value)) and (x.predTicket.customer.succCustomer = x.customer)) )) and (aSelf.succBuyTicket.ticket = aSelf.succBuyTicket.predBuyTicket.ticket.succTicket)) and (aSelf.succBuyTicket.avblTickets = aSelf.succBuyTicket.predBuyTicket.avblTickets->collectNested( t1:Ticket | t1.succTicket )->asSet())) and (aSelf.succBuyTicket.inputId = aSelf.succBuyTicket.predBuyTicket.inputId)) and (aSelf.succBuyTicket.msg = aSelf.succBuyTicket.predBuyTicket.msg)) and (aSelf.succBuyTicket.ticketIds = aSelf.succBuyTicket.predBuyTicket.ticketIds))

context step1_act_BuyTicketOpC inv pre_preSnapshot:
  (aSelf.customer.money > 0)

context step1_act_BuyTicketOpC inv pre_preStep:
  ((aSelf.curStep = 's0') and aSelf.enter_BuyTicket())

context step2_sys_BuyTicketOpC inv post_nextStep:
  ((aSelf.succBuyTicket.curStep = 'step2_sys') and (aSelf.succBuyTicket.matchedStep = 'null'))

context step2_sys_BuyTicketOpC inv post_postSnapshot:
  true

context step2_sys_BuyTicketOpC inv post_unChangedPart:
  ((((((self.succ().customer->forAll( x:Customer | ((x = x) and (x.predCustomer.money = x.money)) ) and self.succ().ticket->forAll( x:Ticket | ((((x = x) and (x.predTicket.id = x.id)) and (x.predTicket.value = x.value)) and (x.predTicket.customer.succCustomer = x.customer)) )) and (aSelf.succBuyTicket.customer = aSelf.succBuyTicket.predBuyTicket.customer.succCustomer)) and (aSelf.succBuyTicket.ticket = aSelf.succBuyTicket.predBuyTicket.ticket.succTicket)) and (aSelf.succBuyTicket.inputId = aSelf.succBuyTicket.predBuyTicket.inputId)) and (aSelf.succBuyTicket.msg = aSelf.succBuyTicket.predBuyTicket.msg)) and (aSelf.succBuyTicket.ticketIds = aSelf.succBuyTicket.predBuyTicket.ticketIds))

context step2_sys_BuyTicketOpC inv pre_preSnapshot:
  (aSelf.avblTickets = self.pred().ticket->select( t:Ticket | t.customer.isUndefined() ))

context step2_sys_BuyTicketOpC inv pre_preStep:
  ((aSelf.curStep = 'step1_act') and (aSelf.matchedStep = 'step2_sys'))

context step3_act_BuyTicketOpC inv post_nextStep:
  ((aSelf.succBuyTicket.curStep = 'step3_act') and (aSelf.succBuyTicket.matchedStep = 'null'))

context step3_act_BuyTicketOpC inv post_postSnapshot:
  true

context step3_act_BuyTicketOpC inv post_unChangedPart:
  (((((self.succ().customer->forAll( x:Customer | ((x = x) and (x.predCustomer.money = x.money)) ) and self.succ().ticket->forAll( x:Ticket | ((((x = x) and (x.predTicket.id = x.id)) and (x.predTicket.value = x.value)) and (x.predTicket.customer.succCustomer = x.customer)) )) and (aSelf.succBuyTicket.customer = aSelf.succBuyTicket.predBuyTicket.customer.succCustomer)) and (aSelf.succBuyTicket.ticket = aSelf.succBuyTicket.predBuyTicket.ticket.succTicket)) and (aSelf.succBuyTicket.msg = aSelf.succBuyTicket.predBuyTicket.msg)) and (aSelf.succBuyTicket.ticketIds = aSelf.succBuyTicket.predBuyTicket.ticketIds))

context step3_act_BuyTicketOpC inv pre_preSnapshot:
  not aSelf.inputId.isUndefined()

context step3_act_BuyTicketOpC inv pre_preStep:
  (if (aSelf.curStep = 'step2_sys') then true else (let rejnStepIndex:RejnStep = Set{RejnStep::step3a2_rejn_step3_1}->any( rj:RejnStep | aSelf.isValidRejnStep(rj) ) in (aSelf.curStep = aSelf.enum2String(rejnStepIndex))) endif and (aSelf.matchedStep = 'step3_act'))

context step3a1_sys_BuyTicketOpC inv post_nextStep:
  ((aSelf.succBuyTicket.curStep = 'step3a1_sys') and (aSelf.succBuyTicket.matchedStep = 'null'))

context step3a1_sys_BuyTicketOpC inv post_postSnapshot:
  true

context step3a1_sys_BuyTicketOpC inv post_unChangedPart:
  (((((((self.succ().customer->forAll( x:Customer | ((x = x) and (x.predCustomer.money = x.money)) ) and self.succ().ticket->forAll( x:Ticket | ((((x = x) and (x.predTicket.id = x.id)) and (x.predTicket.value = x.value)) and (x.predTicket.customer.succCustomer = x.customer)) )) and (aSelf.succBuyTicket.customer = aSelf.succBuyTicket.predBuyTicket.customer.succCustomer)) and (aSelf.succBuyTicket.ticket = aSelf.succBuyTicket.predBuyTicket.ticket.succTicket)) and (aSelf.succBuyTicket.avblTickets = aSelf.succBuyTicket.predBuyTicket.avblTickets->collectNested( t1:Ticket | t1.succTicket )->asSet())) and (aSelf.succBuyTicket.inputId = aSelf.succBuyTicket.predBuyTicket.inputId)) and (aSelf.succBuyTicket.msg = aSelf.succBuyTicket.predBuyTicket.msg)) and (aSelf.succBuyTicket.ticketIds = aSelf.succBuyTicket.predBuyTicket.ticketIds))

context step3a1_sys_BuyTicketOpC inv pre_preStep:
  (let preStep:String = if (aSelf.customer.money < aSelf.ticket.value) then 'step2_sys' else 'null' endif in if (preStep = 's0') then (aSelf.curStep = 's0') else if (preStep = 'null') then false else (aSelf.curStep = preStep) endif endif)

context step4_sys_BuyTicketOpC inv post_nextStep:
  (((aSelf.succBuyTicket.curStep = 'step4_sys') and (aSelf.succBuyTicket.matchedStep = 'null')) and aSelf.succBuyTicket.exit_BuyTicket())

context step4_sys_BuyTicketOpC inv post_postSnapshot:
  true

context step4_sys_BuyTicketOpC inv post_unChangedPart:
  ((((((self.succ().customer - Set{aSelf.succBuyTicket.customer})->forAll( x:Customer | ((x = x) and (x.predCustomer.money = x.money)) ) and (self.succ().ticket - Set{aSelf.succBuyTicket.ticket})->forAll( x:Ticket | ((((x = x) and (x.predTicket.id = x.id)) and (x.predTicket.value = x.value)) and (x.predTicket.customer.succCustomer = x.customer)) )) and (aSelf.succBuyTicket.avblTickets = aSelf.succBuyTicket.predBuyTicket.avblTickets->collectNested( t1:Ticket | t1.succTicket )->asSet())) and (aSelf.succBuyTicket.inputId = aSelf.succBuyTicket.predBuyTicket.inputId)) and (aSelf.succBuyTicket.msg = aSelf.succBuyTicket.predBuyTicket.msg)) and (aSelf.succBuyTicket.ticketIds = aSelf.succBuyTicket.predBuyTicket.ticketIds))

context step4_sys_BuyTicketOpC inv pre_preSnapshot:
  ((not aSelf.ticket.isUndefined() and aSelf.customer.ticket->excludes(aSelf.ticket)) and (aSelf.ticket.id = aSelf.inputId))

context step4_sys_BuyTicketOpC inv pre_preStep:
  ((aSelf.curStep = 'step3_act') and (aSelf.matchedStep = 'step4_sys'))

context Snapshot::copy() : Snapshot
  pre uncopied: self.succ().isUndefined()

