----------------------------------------------------------------
-- the USE model generated for the use case BuyTicket ----
----------------------------------------------------------------

model BuyTicketModel

----------------------------------------
-- classes -----------------------------
---------------------------------------- 

class Customer
attributes
	money: Integer
end

class Ticket
attributes
	id: Integer
	value: Integer
end

enum RejnStep{step3a2_rejn_step3_1}
 
class BuyTicket
attributes
	inputId: Integer
	msg: String
	ticketIds: Set(Integer)
	curStep: String
operations
	enter_BuyTicket(): Boolean = 
		customer.ticket->excludes(ticket) and curStep = 's0'
	exit_BuyTicket(): Boolean = 
		customer.ticket->includes(ticket) and isFinalStep( curStep )
	step1_act()
	step2_sys()
	step3_act()
	step4_sys()
	step3a_alt()
	step3a1_sys()
	step3a2_rejn_step3_1()
	isFinalStep(stepId: String): Boolean =			
		Set{ 'step4_sys','step3a2_rejn_step3_1' }->includes(stepId)	 
	isValidRejnStep(rStepIndex: RejnStep): Boolean =
		if ( rStepIndex = #step3a2_rejn_step3_1 ) then				
			isOK_step3a2_rejn_step3_1()
		else false endif
	isOK_step3a2_rejn_step3_1(): Boolean = 
		customer.money < ticket.value
	enum2String(rStepIndex: RejnStep): String =
		if ( rStepIndex = #step3a2_rejn_step3_1 ) then				
			'step3a2_rejn_step3_1'
		else 'null' endif
end

----------------------------------------
-- associations ------------------------
----------------------------------------

association Takes between
	Customer[0..1] role customer
	Ticket[0..*] role ticket
end

association BuyTicket_customer between
	BuyTicket[0..1] role buyTicketCustomer
	Customer[0..1] role customer
end
association BuyTicket_ticket between
	BuyTicket[0..1] role buyTicketTicket
	Ticket[0..1] role ticket
end
association BuyTicket_avblTickets between
	BuyTicket[0..1] role buyTicketAvblTickets
	Ticket[0..*] role avblTickets
end

----------------------------------------
-- OCL constraints ---------------------
----------------------------------------

constraints

	context BuyTicket::step1_act()
		pre preStep: 
			curStep = 's0'
		post nextStep: 
			curStep = 'step1_act'
		
	context BuyTicket::step2_sys()
		pre preStep: 
			curStep = 'step1_act'
		post nextStep: 
			curStep = 'step2_sys'
		
	context BuyTicket::step3_act()
		pre preStep: 
			if ( curStep = 'step2_sys' ) then
				true
			else let rejnStepIndex: RejnStep = Set{ #step3a2_rejn_step3_1 }->any(rj: RejnStep | isValidRejnStep(rj) ) in
				curStep = enum2String(rejnStepIndex) endif
		post nextStep: 
			curStep = 'step3_act'
		
	context BuyTicket::step4_sys()
		pre preStep: 
			curStep = 'step3_act'
		post nextStep: 
			curStep = 'step4_sys'
		
	
	context BuyTicket::step3a1_sys()
		pre preStep: 
			let preStep: String = if ( customer.money < ticket.value ) then 'step2_sys' else 'null' endif in
			if (preStep = 's0') then curStep = 's0'
			else if (preStep = 'null') then false 
			else curStep = preStep endif endif
		post nextStep: 
			curStep = 'step3a1_sys'
----------------------------------------
