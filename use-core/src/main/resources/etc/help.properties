help.quit.syntax=q, quit, exit
help.quit=Exit USE
help.quit.detail=\
Enter 'q', 'quit' or 'exit' to exit USE.


help.undo.syntax=undo
help.undo=Undo last state manipulation command
help.undo.detail=\
Undoes the last state manipulation command.


help.stepon.syntax=step on
help.stepon=Activates single-step mode
help.stepon.detail=\
Activates single-step mode: `return' continues, `escape' followed by `return' exits step mode.



help.reset.syntax=reset
help.reset=Reset system to empty state
help.reset.detail=\
Reset the USE system state to an empty state.


help.help.syntax=help [!CMD]
help.help=Print available commands
help.help.detail=\
Prints available commands. 'help' CMD prints help about CMD.


help.eval.syntax=? EXPR
help.eval=Compiles and evaluates EXPR
help.eval.detail=\
Compiles and evaluates EXPR.


help.eval.verbose.syntax=?? EXPR
help.eval.verbose=Compiles and evaluates EXPR (verbose)
help.eval.verbose.detail=\
Compiles and evaluates EXPR with verbose output of subexpression results.


help.statictype.syntax=: EXPR
help.statictype=Compiles EXPR and shows its static type
help.statictype.detail=\
Compiles EXPR and shows its static type. 


help.constraints.loaded.syntax=constraints -loaded
help.constraints.loaded=Prints loaded class invariants
help.constraints.loaded.detail=Prints class invariants loaded from an extra file (*.invs).

help.gen.loaded.syntax=gen loaded
help.gen.loaded=Deprecated. Prints loaded class invariants
help.gen.loaded.detail=Deprecated (use 'constraints -loaded' instead)\n\
Prints class invariants loaded from an extra file (*.invs).


help.read.syntax=read FILE
help.read=Deprecated. Reads commands from FILE
help.read.detail=\
Deprecated (use 'open' instead). Reads commands from FILE.


help.readq.syntax=readq FILE
help.readq=Deprecated. Reads commands quietly from FILE
help.readq.detail=\
Deprecated (use 'open' instead). Reads commands quietly from FILE.


help.load.syntax=load [-q] FILE
help.load=Deprecated. Loads invariants from a file
help.load.detail=\
Deprecated (use 'open' instead). Loads invariants from FILE for the Generator\n\n\
-q loads quietly.


help.open.syntax=open [-q] FILE
help.open=Reads information from FILE
help.open.detail=\
Reads information from FILE. FILE can be\n\
a USE specification (.use),\n\
a command file (.cmd), \n\
or an invariants file (.invs).\n\n\
Use '-q' for quiet reading.


help.reopen.syntax=reopen [-l|[-q] <number>]
help.reopen=Loads a previously opened file
help.reopen.detail=\
Loads the last opened file. If a number is given the nth-last file is opened.\n\n\
Use '-l' to list the ten previously opened files including their numbers.\n\n\
Use '-q' for quiet reading.


help.net.syntax=net
help.net=Read commands from socket
help.net.detail=\
Read commands from a socket. Socket number is 1777.


help.genmm.syntax=genmm [FILE]
help.genmm=Output commands for generating a metamodel instance
help.genmm.detail=\
Outputs commands for generating a metamodel instance.


help.info.syntax=info SUBCOMMAND
help.info=Print info
help.info.detail=\
Prints information about the system.\n\
Please use 'info SUBCOMMAND' to get more information. Subcommands are:\n\n\
  class        Info about a class\n\
  model        Info about the model\n\
  state        Info about the current system state\n\
  opstack      Info about currently active operations\n\
  prog         Info about the running program\n\
  vars         Info about global variables


help.create.syntax=!create <id-list> : <class> [between (<id-list>)]
help.create=Creates objects
help.create.detail=\
Creates objects of a given class or association class.\n\n\
  <id-list>   the names of the objects to be created.\n\
  <class>     the class to be instantiated\n\
  <id-list>   If <class> is an association class, then the link ends must\n            be given after 'between'.


help.insert.syntax=!insert (<id-list>) into <assoc>
help.insert=Insert link into association
help.insert.detail=\
Inserts a link into an association.\n\n\
  (<id-list>)    the objects to be connected\n\
  <assoc>        the association


help.destroy.syntax=!destroy <id-list>
help.destroy=Destroys objects
help.destroy.detail=\
Destroys the objects given by <id-list>


help.set.syntax=!set <obj-id>.<attr-id> \u003A\u003D <expr>
help.set=Set attribute value of object
help.set.detail=\
Sets attribute <attr-id> of object <obj-id> to a new value given by <expr>.


help.delete.syntax=!delete (<id-list>) from <assoc>
help.delete=Delete link from association
help.delete.detail=\
Deletes a link from an association.\n\n\
  (<id-list>)    the objects that identify the link\n\
  <assoc>        the association from which the link will be deleted.



help.opexit.syntax=!opexit [<result-expr>]
help.opexit=Exits least recently entered operation
help.opexit.detail=\
Exits least recently entered operation.\n\n\
  <result-expr>  the return value (if the operation has one).


help.openter.syntax=!openter <obj-expr> <name> ([<expr-list>])
help.openter=Enters object operation
help.openter.detail=\
Enters operation <name> in object <obj-expr>.\n\n\
<expr-list> are the parameters of the operation (if any)



help.check.syntax=check [-v] [-d] [ -a | inv-list ]
help.check=Checks integrity constraints
help.check.detail=\
Checks integrity constraints.\n\n\
  -v       Verbose output of subexpression results for failing invariants\n\
  -d       Show which instances cause and invariant to fail.\n\
  -a       Check all invariants (including the loaded ones from the generator)\n\
  inv-list Check only given invariants.\n\n\
Invariants are separated with a space\n\n\
Signature of an invariant is <context>::<invName>


help.cmd.syntax=! CMD
help.cmd=Executes state manipulation command
help.cmd.detail=\
Executes state manipulation command CMD.\n\
Please use 'help CMD' to get more specific information.\n\
Available commands:\n\n\
  !create   Create objects\n\
  !destroy  Destroy objects\n\
  !insert   Insert link into association \n\
  !delete   Delete link form association\n\
  !set      Set attribute value of object\n\
  !openter  Enter operation\n\
  !opexit   Exit least recently entered operation.


help.multiline.syntax=\\
help.multiline=Enter OCL-Expressions over multiple lines
help.multiline.detail=\
Use \\ to enter multiline mode. Finish with a '.' on a single line.


help.info.vars.syntax=info vars
help.info.vars=Prints information about global variables
help.info.vars.detail=Prints information about global variables.

help.info.prog.syntax=info prog
help.info.prog=Print internal program infos
help.info.prog.detail=\
Prints information about the USE process (i.e., memory usage).

help.info.opstack.syntax=info opstack
help.info.opstack=Print currently active operations
help.info.opstack.detail=\
Print all currently active operations. This is the operation call stack.

help.info.state.syntax=info state
help.info.state=Print info about current system state
help.info.state.detail=\
Prints information about the current system state.\n\
Shows how many objects and links are created (per class/association).

help.info.model.syntax=info model
help.info.model=Print info about loaded model
help.info.model.detail=\
Prints all information about the loaded model (classes, associations, constraints).

help.info.class.syntax=info class NAME
help.info.class=Print info about class
help.info.class.detail=\
Print information about a class.

help.info.coverage.syntax=coverage [-sum] [-total|-invariants|-pre|-post|-contracts]
help.info.coverage=Print info about coverage of invariants or pre-/post-conditions.
help.info.coverage.detail=\
Prints information about the coverage of invariants or pre-/postconditions.\n\
Options:\n\
-sum Prints the number of times an invariant accesses a model element type\n\
instead of the concrete model element names.\n\
-total Calculates the model coverage for the complete model and for each\n\
invariant.\n\
-invariants Shows how often a model element is used inside invariants\n\
and which elements each invariant covers. This is the DEFAULT option.\n\
-pre Shows how often a model element is used inside preconditions\n\
and which elements each precondition covers.\n\
-post Shows how often a model element is used inside postconditions\n\
and which elements each postcondition covers.\n\
-contracts Shows classes covered by contracts.\n\

help.constraints.load.syntax=constraints -load FILE
help.constraints.load=Loads class invariants
help.constraints.load.detail=Loads class invariants (<context>::<invName>)\n\
from an invariant file (*.invs)

help.gen.load.syntax=gen load FILE
help.gen.load=Deprecated. Loads class invariants
help.gen.load.detail=Deprecated (use 'constraints -load' instead)\n\
Loads class invariants (<context>::<invName>)\n\
from an invariant file (*.invs)

help.gen.start.syntax=gen start [options] FILE PROCNAME([params])
help.gen.start=Search valid system state
help.gen.start.detail=\
Searches for a valid system state using the ASSL procedure PROCNAME in FILE\n\n\
FILE      the file containing PROCNAME\n\
PROCNAME  the name of the ASSL procedure\n\
\n\
-l NUM     Check only NUM system states (limit)\n\
-r NUM     Initializes the random number generator with NUM\n\
-b         Print state changes during search (brief)\n\
-d         Print flow of control and state changes (detailed)\n\
-bf FILE2  Print brief output to FILE\n\
-df FILE2  Print detailed output to FILE\n\
-s         Do not check multiplicities\n\
-dc        Do not cut evaluation when Try inserts multiplicity errors.\n\
\t     This option is enforced by option -n.\n\
-ac        Always use all possible combinations at Try including invalid\n\
\t     multiplicities. This option is enforced by option -n.\n\
-nb        Do not calculate barriers

help.constraints.flags.syntax=constraints -flags [invnames] [+d|-d] [+n|-n]
help.constraints.flags=Switch invariant evaluation flags
help.constraints.flags.detail=\
Control evaluation of invariants.\n\
Invariants can be negated or deactivated using this command.\n\n\
invnames    a name of an invariant (<context>::<invName>)\n\
+d          deactivates the invariants\n\
-d          activates the invariants\n\
+n          negates the invariants\n\
-n          undo +n\n\
\n\
If no options are specified this command prints out the flags currently set.
           
help.gen.flags.syntax=gen flags [invnames] [+d|-d] [+n|-n]
help.gen.flags=Deprecated. Switch invariant evaluation flags
help.gen.flags.detail=Deprecated (use 'constraints -flags' instead)\n\
Control evaluation of invariants.\n\
Invariants can be negated or deactivated using this command.\n\n\
invnames    a name of an invariant (<context>::<invName>)\n\
+d          deactivates the invariants\n\
-d          activates the invariants\n\
+n          negates the invariants\n\
-n          undo +n\n\
\n\
If no options are specified this command prints out the flags currently set.

help.constraints.unload.syntax=constraints -unload [invnames]
help.constraints.unload=Unloads added class invariants
help.constraints.unload.detail=Unloads class invariants (<context>::<invName>)\n\
added from an invariant file (*.invs)

help.gen.unload.syntax=gen unload [invnames]
help.gen.unload=Deprecated. Unloads added class invariants
help.gen.unload.detail=Deprecated (use 'constraints -unload' instead)\n\
Unloads class invariants (<context>::<invName>)\n\
added from an invariant file (*.invs)

help.gen.result.syntax=gen result
help.gen.result=Prints results of last generator search
help.gen.result.detail=\
Prints results (USE commands) of the last generator search.

help.gen.result.inv.syntax=gen result inv
help.gen.result.inv=Prints statistics of last generator search
help.gen.result.inv.detail=\
Prints statistics about the evaluation of invariants of the last generator search.


help.gen.result.accept.syntax=gen result accept
help.gen.result.accept=Accept result of last generator search
help.gen.result.accept.detail=\
Sets the USE system state to the state found by the last generator search.

help.plugins.syntax=plugins
help.plugins=Prints currently available plugin commands
help.plugins.detail=\
Prints currently installed plugin commands.

help.delay.syntax=delay [<number>]
help.delay=Sets a delay of <number> ms between the execution of commands. 
help.delay.detail=\
Sets a delay between the execution of commands on the shell. Can be used to simulate execution.