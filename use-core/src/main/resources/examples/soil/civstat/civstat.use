model CivilStatusWorld

enum CivilStatus {single, married, divorced, widowed}
enum Gender {female, male}

class Person

----------
attributes
  name:String
  civstat:CivilStatus
  gender:Gender
  alive:Boolean

----------
operations

-----------
-- birth --
-----------

birth(aName:String, aGender:Gender)
begin
  self.name    := aName;
  self.gender  := aGender;
  self.civstat := #single;
  self.alive   := true
end

pre  freshUnlinkedPerson: 
	   name.isUndefined    and 
	   civstat.isUndefined and
	   gender.isUndefined  and 
	   alive.isUndefined   and 
	   wife.isUndefined    and 
	   husband.isUndefined

post nameAssigned:    name    = aName   -- equivalent to 'aName=name'
post civstatAssigned: civstat = #single
post genderAssigned:  gender  = aGender
post isAliveAssigned: alive   = true    -- equivalent to 'alive'


-----------
-- marry --
-----------

marry(aSpouse:Person)
begin
  if (self.gender = #female) then
    insert (self, aSpouse) into Marriage
  else
    insert (aSpouse, self) into Marriage
  end;
  self.civstat    := #married;
  aSpouse.civstat := #married
end

pre  aSpouseDefined:   aSpouse.isDefined
pre  isAlive:          alive
pre  aSpouseAlive:     aSpouse.alive
pre  isUnmarried:      civstat <> #married
pre  aSpouseUnmarried: aSpouse.civstat <> #married
pre  differentGenders: gender <> aSpouse.gender

post isMarried:               civstat = #married
post femaleHasMarriedHusband: gender = #female implies
                                husband         = aSpouse and 
								husband.civstat = #married
post maleHasMarriedWife:      gender = #male implies
                                wife         = aSpouse and 
								wife.civstat = #married

-------------
-- divorce --
-------------
								
divorce()
begin
  declare spouse : Person;  
  --spouse := self;
  spouse := self.spouse();
  self.civstat          := #divorced;
  spouse.civstat := #divorced;
  if (self.gender = #female) then
    delete (self, spouse) from Marriage
  else
    delete (spouse, self) from Marriage
  end
end

pre  isMarried:    civstat = #married
pre  isAlive:      alive
pre  husbandAlive: gender = #female implies husband.alive
pre  wifeAlive:    gender = #male implies wife.alive

post isDivorced:      civstat=#divorced
post husbandDivorced: gender=#female implies
                        husband.isUndefined             and 
						husband@pre.civstat = #divorced
post wifeDivorced:   gender = #male implies
                       wife.isUndefined             and 
					   wife@pre.civstat = #divorced

-----------		
-- death --
-----------
					   
death()
begin
  self.alive := false;
  if (self.civstat = #married) then
    self.spouse().civstat := #widowed;
	if (self.gender = #female) then
	  delete (self, self.spouse()) from Marriage
	else
	  delete (self.spouse(), self) from Marriage
	end
  end
end

pre  isAlive: alive

post notAlive:       not(alive)
post husbandWidowed: gender = #female and husband.isDefined implies
                       husband@pre.wife.isUndefined and 
					   husband@pre.civstat = #widowed
post wifeWidowed:    gender = #male and wife.isDefined implies
                       wife@pre.husband.isUndefined and 
					   wife@pre.civstat = #widowed

					   
test() : Boolean = true
pre alwaysFalse : false


test2() : Boolean
begin
  result := true;
end

	 
--------------------
-- recursion test --
--------------------

fac(n : Integer) : Integer
begin
  declare m : Integer;
  result := 1;
  if (n > 1) then
    m := self.fac(n - 1);
    result := n * m
  end;
end

------------
-- spouse --
------------
	 

spouse() : Person = 
  if gender = #female then 
    husband 
  else 
    wife 
  endif

  
-----------
constraints
  inv attributesDefined: name.isDefined and civstat.isDefined and
      gender.isDefined and alive.isDefined
  inv nameCapitalThenSmallLetters:
      let small:Set(String)=
        Set{'a','b','c','d','e','f','g','h','i','j','k','l','m',
            'n','o','p','q','r','s','t','u','v','w','x','y','z'} in
      let capital:Set(String)=
        Set{'A','B','C','D','E','F','G','H','I','J','K','L','M',
            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'} in
      capital->includes(name.substring(1,1)) and
      Set{2..name.size}->forAll(i |
        small->includes(name.substring(i,i)))
  inv nameIsUnique: Person.allInstances->forAll(self2|
      self<>self2 implies self.name<>self2.name)
  inv femaleHasNoWife: gender=#female implies wife.isUndefined
  inv maleHasNoHusband: gender=#male implies husband.isUndefined

end

association Marriage between
  Person [0..1] role wife
  Person [0..1] role husband
end
