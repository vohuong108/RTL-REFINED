@Monitor(defaultPackage="net.sf.freecol.common.model")
model FreeCol

class Map
end

class Tile < Location
  attributes
    x : Integer
	y : Integer
	type : TileType
  operations
    
	@Monitor(isQuery="true")
	getNeighbours() : Set(Tile) = Set{}
	
	/*
	  Set{-1,0,1}->product(Set{-1,0,1})->collect(t |
	    self.map.tiles[self.x + t.first, self.y + t.second])->
		  excluding(null)->excluding(self)->asSet()
	*/	
end

-- Find tiles not related to any map
/*
class ColonyTile < Location
end

class PathNode
  attributes
    tile : Tile
end

class PlayerExploredTile
  attributes
    tile : Tile
end

class TileItemContainer
  attributes
    tile : Tile
end

@Monitor(package="net.sf.freecol.client.gui")
class TerrainCursor
  attributes
    tile : Tile
end

@Monitor(package="net.sf.freecol.client.gui.panel")
class TileInfoPanel
  attributes
    tile : Tile
end

association ColonyTileTile between
	ColonyTile[*]
	Tile[1] role workTile
end
*/

class TileType
  attributes
    canSettle : Boolean
end

class Europe < Location
end

class Unit < Location
  attributes
    movesLeft : Integer
	--owner : Player
	
  operations
    joinColony(colony : Colony)
	
	setMovesLeft(moves:Integer)
    
	buildColony(colony:Colony)
end

class UnitType
end

abstract class Location
end

class Settlement < Location
  attributes
    name : String
  operations
    -- placeSettlement()
	-- claimTiles()
end

class Colony < Settlement
end

class IndianSettlement < Settlement
end

class Player
  attributes
    name : String
end

association TypeOfUnit between
  Unit[*] role unit
  UnitType[1] role unitType
end

association UnitLocation between
  Unit[*] role unit
  Location[1] role location
end

/*
association TypeOfTile between
  Tile[*] role tile
  TileType[1] role type
end
*/

association MapTiles between
  Map[1] role map qualifier (x:Integer, y:Integer)
  Tile[0..1] role tiles
end

association SettlementPlacement between
  Tile[1] role tile
  Settlement[0..1] role settlement
end

constraints
-- context Unit::buildColony(colony:Colony)
  -- pre movesLeft: self.movesLeft > 0
	  
  /*
  pre tileIsEmpty:
	self.location.oclIsKindOf(Tile) and 
	self.location.oclAsType(Tile).settlement.isUndefined()
  
  pre noSurroundingColonies:
	self.location.oclIsKindOf(Tile) and 
	self.location.oclAsType(Tile).getNeighbours()->forAll(t |
	  t.settlement.isUndefined())

  post noMovesLeft: movesLeft = 0
  */
context Colony inv noNeighbours:
  self.tile.getNeighbours()->forAll(t |
    t.settlement.isUndefined())