model TreeList

class Elem
attributes
  value:Integer
operations
  all():Set(Elem)=allAux(oclEmpty(Set(Elem)))
  allAux(r:Set(Elem)):Set(Elem)=Set{self}->
    union(if leftChild->size=1 and r->excludes(leftChild) then
          leftChild.allAux(r->including(leftChild)) else oclEmpty(Set(Elem)) endif)->
    union(if rightChild->size=1 and r->excludes(rightChild) then
          rightChild.allAux(r->including(rightChild)) else oclEmpty(Set(Elem)) endif)
  acyclic():Boolean=all()->forAll(e|
    if e.leftChild->size=1 then e.leftChild.all() else oclEmpty(Set(Elem)) endif->
    union(
    if e.rightChild->size=1 then e.rightChild.all() else oclEmpty(Set(Elem)) endif)->
      excludes(e))
  atMostOneRoot():Boolean=
    all()->forAll(e|e.leftRoot->size+e.rightRoot->size<=1)
  isTree():Boolean=
    acyclic() and atMostOneRoot()
  isOrderedTree():Boolean= -- possible split: partially/totally ordered
    if isTree() then
      if leftChild->size=1 then leftChild.isOrderedTree() and
        leftChild.all()->forAll(e|e.value<=value) else true endif and
      if rightChild->size=1 then rightChild.isOrderedTree() and
        rightChild.all()->forAll(e|value<=e.value) else true endif
    else false endif
end

association LeftElem between
  Elem[0..1] role leftRoot
  Elem[0..1] role leftChild
end

association RightElem between
  Elem[0..1] role rightRoot
  Elem[0..1] role rightChild
end

constraints

context Elem inv isTree:
  isTree() and
  Elem.allInstances()->one(e|e.leftRoot->size+e.rightRoot->size=0)
  