# See the README file in this directory for information about the file
# format.

# create some objects

!create a:A

!create b1:B
!set b1.battr := 'b1'
!create b2:B
!set b2.battr := 'b2'

!create c1:C
!set c1.cattr := 'c1'
!create c2:C
!set c2.cattr := 'c2'
!create c3:C
!set c3.cattr := 'c3'

!insert(a,b1) into A_B
!insert(a,b2) into A_B

!insert(b1,c1) into B_C
!insert(b1,c2) into B_C
!insert(b2,c3) into B_C

? a.b
*-> Set{b1,b2} : Set(B)

# Most of the following tests form pairs. The first test evaluates the
# shorthand notation of an expression, the second test checks for
# equivalence with the explicit expression.

#
## shorthand used with navigation and attribute access
#

? a.b.c
*-> Bag{c1,c2,c3} : Bag(C)

? a.b.c = a.b->collect(b | b.c)->flatten
*-> true : Boolean


? a.b.battr
*-> Bag{'b1','b2'} : Bag(String)

? a.b.battr = a.b->collect(b | b.battr)
*-> true : Boolean


? a.b.battr->collect(battr | battr.oclIsTypeOf(String))
*-> Bag{true,true} : Bag(Boolean)

? a.b.battr.oclIsTypeOf(String) = a.b.battr->collect(battr | battr.oclIsTypeOf(String))
*-> true : Boolean

# also check other type operations 

? a.b.battr->collect(battr | battr.oclIsKindOf(String))
*-> Bag{true,true} : Bag(Boolean)

? a.b.battr->collect(battr | battr.oclAsType(String))
*-> Bag{'b1','b2'} : Bag(String)


# Note: because the result of the expression a.b.c is a nested
# collection, flattening is also applied.

? a.b.c.cattr
*-> Bag{'c1','c2','c3'} : Bag(String)

? a.b.c.cattr = a.b->collect(b | b.c)->flatten->collect(c | c.cattr)
*-> true : Boolean

#
## shorthand used with navigation and operation call
#

? a.b.bop1()
*-> Bag{'b1','b2'} : Bag(String)

? a.b.bop1() = a.b->collect(b | b.bop1())
*-> true : Boolean

? a.b.bop2()
*-> Bag{'b1','b1b1','b2','b2b2'} : Bag(String)

? a.b.bop2() = a.b->collect(b | b.bop2())->flatten
*-> true : Boolean


? a.b.bop3('foo')
*-> Bag{'b1foo','b2foo'} : Bag(String)

? a.b.bop3('foo') = a.b->collect(b | b.bop3('foo'))
*-> true : Boolean

#
## shorthand applied to collection of simple data types
#

? Set{-2..2}.abs
*-> Bag{0,1,1,2,2} : Bag(Integer)

? Set{-2..2}.abs = Set{-2..+2}->collect(i | i.abs)
*-> true : Boolean


? Set{Set{1,2},Set{3}}.size
*-> Bag{1,2} : Bag(Integer)

? Set{Set{1,2},Set{3}}.size = Set{Set{1,2},Set{3}}->collect(s | s->size)
*-> true : Boolean


# Note that the shortcut cannot be applied to iterate-based
# expressions. The following will not work! (This is a non-problem for
# standard OCL, because there is no way to keep nested collections
# anyway.)

# Set{Set{1,2},Set{3}}->collect(s | s->forAll( e | e < 5)) does not map to
# Set{Set{1,2},Set{3}}.forAll(e | e < 5) = 

# Note: because the result of the following expression is a nested
# collection, flattening is also applied.

? Set{Set{1,2},Set{3}}.including(4)
*-> Bag{1,2,3,4,4} : Bag(Integer)

? Set{Set{1,2},Set{3}}.including(4) = Set{Set{1,2},Set{3}}->collect(s | s->including(4))->flatten
*-> true : Boolean

# Shorthand collect on tuples (Mantis issue #0000134)
# Need to be fixed to collect(a)
# let s=Set{Tuple{a:'Tolkien',b:'Rings'},Tuple{a:'Dante',b:'Comedia'}} in s.a = s->collect(a)
? let s=Set{Tuple{a:'Tolkien',b:'Rings'},Tuple{a:'Dante',b:'Comedia'}} in s.b = s->collect(b)
*-> true : Boolean

exit
