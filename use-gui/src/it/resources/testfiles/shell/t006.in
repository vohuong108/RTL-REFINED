# $ProjectHeader: use 0.393 Wed, 16 May 2007 14:10:28 +0200 opti $

# See the README file in this directory for information about the file
# format.

# first create some objects

!create a1,a2:A

? A.allInstances->select(attr > 0)
*-> Set{} : Set(OclVoid)

? Set{1,2}->select(i | i.abs() > 0)
*-> Set{1,2} : Set(Integer)

# element variable omitted

? Set{1,2}->select(abs() > 0)
*-> Set{1,2} : Set(Integer)

# If an element variable is declared, it has to be used. The
# following doesn't work.
# ? Set{1,2}->select(i | abs() > 0)

? Set{1,2}->forAll(i1, i2 | i1 <> i2)
*-> false : Boolean

# Issue #0000119 (Parser does not allow multiple type declarations in OCL iterate expression )
? Set{1,2}->forAll(i1:Integer, i2:Integer | i1 <> i2)
*-> false : Boolean

? Set{1,2}->forAll(i1:Integer, i2:Real | i1 <> i2)
*-> false : Boolean

? Set{1,2}->forAll(i1:Integer, i2 | i1 <> i2)
*-> false : Boolean

# Implicit element variables also work for nested collections and
# iterate-based expressions.

? Set{Set{1,2},Set{3}}->forAll(select(true)->size() > 0)
*-> true : Boolean

# Nested iterate-based expression without element variables

? Set{Set{1,2},Set{3}}->select(exists(abs() > 2))
*-> Set{Set{3}} : Set(Set(Integer))

?let c:OrderedSet(OclAny) = OrderedSet{} in c->append(1)->oclIsTypeOf(OrderedSet(Integer))
*-> true : Boolean

?let c:OrderedSet(OclAny) = OrderedSet{1} in c->append(1)->oclIsTypeOf(OrderedSet(Integer))
*-> true : Boolean

?let c:OrderedSet(OclAny) = OrderedSet{} in c->append(1)->oclIsTypeOf(OrderedSet(String))
*-> false : Boolean

?let c:Collection(OclAny) = OrderedSet{1} in c->oclIsTypeOf(OrderedSet(String))
*-> false : Boolean

?let c:Collection(OclAny) = OrderedSet{1} in c->oclIsTypeOf(Set(String))
*-> false : Boolean

?let c:Collection(OclAny) = OrderedSet{1} in c->oclIsKindOf(Set(String))
*-> false : Boolean

?let c:Collection(OclAny) = OrderedSet{1} in c->oclIsKindOf(OrderedSet(Integer))
*-> true : Boolean


exit
