model RoyalAndLoyal

enum Color { gold, silver}

class Date1
attributes
	now : String
operations
	isBefore(t : Date1) : Boolean = true
	isAfter(t : Date1) : Boolean = true
	equals(t : Date1) : Boolean
end

class LoyaltyProgram
attributes
	name : String
operations
	getServices() : Set(Service)
		post : result = partners.deliveredServices
	getServicesByLevel(levelName : String) : Set(Service)
		post : result = levels->select(name = levelName).availableServices->asSet()
	enroll(c : Customer) : OclVoid
		post : participants = participants@pre -> including(c)
	addService(aPartner: ProgramPartner, aLevel: ServiceLevel, aService: Service) : OclVoid
		post: partners.deliveredServices->includes(aService) and
				levels.availableServices->includes(aService) and
				partners.deliveredServices->includes(aService) 
			and levels.availableServices->includes(aService)
constraints
	inv minService : partners -> forAll(deliveredServices->size() >= 1)
	inv noAccounts : partners.deliveredServices->forAll(pointsEarned = 0 and pointsBurned = 0) 
						implies membership.account->isEmpty()
	inv firstLevel : levels->first().name = 'Silver'
end

class ProgramPartner
attributes
	numberOfCustomers : Integer
	name : String
operations
	getBurningTransactions() : Set(Transaction)
		post : result = self.deliveredServices.transactions->iterate(
				t : Transaction; resultSet : Set(Transaction) = Set{} |
					if(t.oclIsTypeOf(Burning)) then
						resultSet -> including(t)
					else resultSet
					endif
				)
constraints
	inv nrOfParticipants : numberOfCustomers = programs.participants->size()
	inv totalPoints : deliveredServices.transactions.points->sum() < 10000
	inv totalPointsEarning : deliveredServices.transactions ->
	                              select(oclIsTypeOf(Earning)).points -> sum() < 10000
end

class Customer
attributes
	name : String
	title : String
	isMale : Boolean
	dateOfBirth : Date1
	age : Integer
	initial : String
operations
	age() : Integer
constraints
	inv : initial = name.substring(1, 1)
	inv ofAge : age >= 18
	inv sizesAgree : programs->size() = cards->select(valid = true) -> size()
end

class CustomerCard
attributes
	valid : Boolean
	validForm : Date1
	goodThru : Date1
	color : Color
	printedName : String
operations
	getTotalPoints(d : Date1) : Integer
		post : result = transactions->select(date.isAfter(d)).points-> sum()
	getAllInstance() : Set(CustomerCard) = CustomerCard.allInstances
constraints
	inv : printedName = owner.title.concat(' ').concat(owner.name)
	inv checkDate : validForm.isBefore(goodThru)
end

class LoyaltyAccount
attributes
	points : Integer
	number : Integer
	turnOver : Real
	usedServices : Set(Service)
	totalPointsEarned : Integer
operations
	earn(i : Integer) : OclVoid
	burn(i : Integer) : OclVoid
	isEmpty() : Boolean
	getCustomerName() : String
		pre : membership.card.owner.name -> size() = 1
		---(?)post : result = membership.card.owner->first().name
	isEmpty() : Boolean
	    pre  : true
		post : result = (points = 0)
constraints
	inv : turnOver = transactions.amount -> sum()
	inv : usedServices = transactions.service->asSet()
	inv : totalPointsEarned = transactions->select(oclIsTypeOf(Earning)).points->sum()
	inv oneOwner : transactions.card.owner->asSet()->size() = 1
	inv : points > 0 implies transactions->exists(t | t.points > 0)
end

class ServiceLevel
attributes
	name : String
end

class Service
attributes
	condition : Boolean
	pointsEarned : Integer
	pointsBurned : Integer
	description : String
	serviceNr : Integer
operations
	calcPoints() : Integer
constraints
	inv : self.isUndefined() = false
	---inv : self.oclIsInvalid() = false
end

class Transaction
attributes
	points : Integer
	date : Date1
	amount : Real
operations
	program() : LoyaltyProgram
end

class Burning < Transaction
---constraints
------inv : self.points = self.oclAsType(Transaction).points
end

class Earning < Transaction
end

associationclass Membership between
	Customer [0..*] role participants
	LoyaltyProgram [0..*] role programs
operations
	getCurrentLevelName() : String
		post : result = currentLevel.name
constraints
	inv correctCard : (programs.participants.cards -> intersection(self.card))->size() >= 1
	inv levelAnColor : currentLevel.name = 'Silver' implies (card.color->includes(Color::silver) and (card.color -> size() = 1))
						and
					   currentLevel.name = 'Gold' implies (card.color->includes(Color::gold) and (card.color->size()=1))
end

associationclass customerCustomerCard between
	Customer [1] role owner
	CustomerCard [0..*] role cards
end

association loyaltyProgramProgramPartner between
	LoyaltyProgram [1..*] role programs
	ProgramPartner [1..*] role partners
end

association loyaltyProgramServiceLevel between
	LoyaltyProgram [1] role program
	ServiceLevel [1..*] role levels ordered
end

associationclass memCustomerCard between
	CustomerCard [1] role card
	Membership [1]
	LoyaltyAccount [0..1] role account
end

association memServiceLevel between
	Membership [0..*]
	ServiceLevel [1] role currentLevel
end

association serviceServiceLevel between
	Service [0..*] role availableServices
	ServiceLevel [1] role level
end

association serviceProgramPartner between
	Service [0..*] role deliveredServices
	ProgramPartner [1] role partner
end

association serviceTransaction between
	Service [1]
	Transaction [0..*] role transactions
end

association transLoyaltyAccount between
	Transaction [0..*] role transactions
	LoyaltyAccount [1] role account
end

association transCustomerCard between
	CustomerCard [1] role card
	Transaction [0..*] role transactions
end
