-- test new operation from OCL 2.2

-- Integer.toString()
?123.toString()
*-> '123' : String

-- Real.toString()
?12.3.toString()
*-> '12.3' : String
?let i:Integer = null in i.toString()
*-> null : OclVoid

-- New operations on String
-- +
?'a' + 'b'
*-> 'ab' : String
?'' + 'a'
*-> 'a' : String
?'' + ''
*-> '' : String
?'a' + 'b' + 'c'
*-> 'abc' : String

-- toInteger
?'120'.toInteger()
*-> 120 : Integer
?'0'.toInteger()
*-> 0 : Integer
?''.toInteger()
*-> null : OclVoid
?'-120'.toInteger()
*-> -120 : Integer
?'120.5'.toInteger()
*-> null : OclVoid

-- toReal
?'120.5'.toReal()
*-> 120.5 : Real
?'0'.toReal()
*-> 0.0 : Real
?''.toReal()
*-> null : OclVoid
?'-120.3'.toReal()
*-> -120.3 : Real
?'120'.toReal()
*-> 120.0 : Real

-- indexOf
?'abcd'.indexOf('a')
*-> 1 : Integer
?'abcd'.indexOf('d')
*-> 4 : Integer
?'abcd'.indexOf('x')
*-> 0 : Integer
?'abcd'.indexOf('')
*-> 1 : Integer
?''.indexOf('a')
*-> 0 : Integer
?''.indexOf('')
*-> 0 : Integer

-- equalsIgnoreCase
?'abcd'.equalsIgnoreCase('ABCD')
*-> true : Boolean
?'abcd'.equalsIgnoreCase('AbcD')
*-> true : Boolean
?'abcd'.equalsIgnoreCase('ABBD')
*-> false : Boolean
?''.equalsIgnoreCase('')
*-> true : Boolean
?'abcd'.equalsIgnoreCase('')
*-> false : Boolean

-- at
?'abcd'.at(0)
*-> null : OclVoid
?'abcd'.at(1)
*-> 'a' : String
?'abcd'.at(2)
*-> 'b' : String
?'abcd'.at(3)
*-> 'c' : String
?'abcd'.at(4)
*-> 'd' : String
?'abcd'.at(5)
*-> null : OclVoid

-- characters
?'abcda'.characters()
*-> Sequence{'a','b','c','d','a'} : Sequence(String)
?''.characters()
*-> Sequence{} : Sequence(OclVoid)

-- toBoolean
?'true'.toBoolean()
*-> true : Boolean
?'false'.toBoolean()
*-> false : Boolean
?'askfds'.toBoolean()
*-> false : Boolean

-- new Boolean operations
-- toString
?true.toString()
*-> 'true' : String
?false.toString()
*-> 'false' : String

-- new Collection operations
-- min
?Set{1, 2, 3, 4}->min()
*-> 1 : Integer
?Set{1.0, 2.0, 3.0, 4.0}->min()
*-> 1.0 : Real
?Set{}->min()
*-> null : OclVoid
?Bag{1, 2, 3, 4}->min()
*-> 1 : Integer
?Bag{1.0, 2.0, 3.0, 4.0}->min()
*-> 1.0 : Real
?Bag{}->min()
*-> null : OclVoid
?OrderedSet{1, 2, 3, 4}->min()
*-> 1 : Integer
?OrderedSet{1.0, 2.0, 3.0, 4.0}->min()
*-> 1.0 : Real
?OrderedSet{}->min()
*-> null : OclVoid
?Sequence{1, 2, 3, 4}->min()
*-> 1 : Integer
?Sequence{1.0, 2.0, 3.0, 4.0}->min()
*-> 1.0 : Real
?Sequence{}->min()
*-> null : OclVoid
-- max
?Set{1, 2, 3, 4}->max()
*-> 4 : Integer
?Set{1.0, 2.0, 3.0, 4.0}->max()
*-> 4.0 : Real
?Set{}->max()
*-> null : OclVoid
?Bag{1, 2, 3, 4}->max()
*-> 4 : Integer
?Bag{1.0, 2.0, 3.0, 4.0}->max()
*-> 4.0 : Real
?Bag{}->max()
*-> null : OclVoid
?OrderedSet{1, 2, 3, 4}->max()
*-> 4 : Integer
?OrderedSet{1.0, 2.0, 3.0, 4.0}->max()
*-> 4.0 : Real
?OrderedSet{}->max()
*-> null : OclVoid
?Sequence{1, 2, 3, 4}->max()
*-> 4 : Integer
?Sequence{1.0, 2.0, 3.0, 4.0}->max()
*-> 4.0 : Real
?Sequence{}->max()
*-> null : OclVoid
-- #################################
-- asSet
-- #################################
-- Set as Set
?Set{}->asSet()
*-> Set{} : Set(OclVoid)
?Set{1}->asSet()
*-> Set{1} : Set(Integer)
?Set{'1'}->asSet()
*-> Set{'1'} : Set(String)
?Set{1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
-- Bag as Set
?Bag{}->asSet()
*-> Set{} : Set(OclVoid)
?Bag{1}->asSet()
*-> Set{1} : Set(Integer)
?Bag{1, 1}->asSet()
*-> Set{1} : Set(Integer)
?Bag{'1'}->asSet()
*-> Set{'1'} : Set(String)
?Bag{1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
?Bag{1, '1', 1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
-- Sequence as Set
?Sequence{}->asSet()
*-> Set{} : Set(OclVoid)
?Sequence{1}->asSet()
*-> Set{1} : Set(Integer)
?Sequence{1, 1}->asSet()
*-> Set{1} : Set(Integer)
?Sequence{'1'}->asSet()
*-> Set{'1'} : Set(String)
?Sequence{1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
?Sequence{1, '1', 1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
-- OrderedSet as Set
?OrderedSet{}->asSet()
*-> Set{} : Set(OclVoid)
?OrderedSet{1}->asSet()
*-> Set{1} : Set(Integer)
?OrderedSet{1, 1}->asSet()
*-> Set{1} : Set(Integer)
?OrderedSet{'1'}->asSet()
*-> Set{'1'} : Set(String)
?OrderedSet{1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
?OrderedSet{1, '1', 1, '1'}->asSet()
*-> Set{'1',1} : Set(OclAny)
-- #################################
-- asSequence
-- #################################
-- Set as Sequence
?Set{}->asSequence()
*-> Sequence{} : Sequence(OclVoid)
?Set{1}->asSequence()
*-> Sequence{1} : Sequence(Integer)
?Set{'1'}->asSequence()
*-> Sequence{'1'} : Sequence(String)
?Set{1, '1'}->asSequence()
*-> Sequence{'1',1} : Sequence(OclAny)
-- Bag as Sequence
?Bag{}->asSequence()
*-> Sequence{} : Sequence(OclVoid)
?Bag{1}->asSequence()
*-> Sequence{1} : Sequence(Integer)
?Bag{'1'}->asSequence()
*-> Sequence{'1'} : Sequence(String)
?Bag{1, '1'}->asSequence()
*-> Sequence{'1',1} : Sequence(OclAny)
?Bag{1, 1, 1}->asSequence()
*-> Sequence{1,1,1} : Sequence(Integer)
?Bag{1, '1', 1}->asSequence()
*-> Sequence{'1',1,1} : Sequence(OclAny)
-- Sequence as Sequence
?Sequence{}->asSequence()
*-> Sequence{} : Sequence(OclVoid)
?Sequence{1}->asSequence()
*-> Sequence{1} : Sequence(Integer)
?Sequence{'1'}->asSequence()
*-> Sequence{'1'} : Sequence(String)
?Sequence{1, '1'}->asSequence()
*-> Sequence{1,'1'} : Sequence(OclAny)
?Sequence{1, 1, 1}->asSequence()
*-> Sequence{1,1,1} : Sequence(Integer)
?Sequence{1, '1', 1}->asSequence()
*-> Sequence{1,'1',1} : Sequence(OclAny)
-- OrderedSet as Sequence
?OrderedSet{}->asSequence()
*-> Sequence{} : Sequence(OclVoid)
?OrderedSet{1}->asSequence()
*-> Sequence{1} : Sequence(Integer)
?OrderedSet{'1'}->asSequence()
*-> Sequence{'1'} : Sequence(String)
?OrderedSet{1, '1'}->asSequence()
*-> Sequence{1,'1'} : Sequence(OclAny)
?OrderedSet{1, 1, 1}->asSequence()
*-> Sequence{1} : Sequence(Integer)
?OrderedSet{1, '1',1}->asSequence()
*-> Sequence{1,'1'} : Sequence(OclAny)
?OrderedSet{2, '2', 1, '1', '3', 3}->asSequence()
*-> Sequence{2,'2',1,'1','3',3} : Sequence(OclAny)
-- #################################
-- asOrderedSet
-- #################################
-- Set as OrderedSet
?Set{}->asOrderedSet()
*-> OrderedSet{} : OrderedSet(OclVoid)
?Set{1}->asOrderedSet()
*-> OrderedSet{1} : OrderedSet(Integer)
?Set{'1'}->asOrderedSet()
*-> OrderedSet{'1'} : OrderedSet(String)
?Set{1, '1'}->asOrderedSet()
*-> OrderedSet{'1',1} : OrderedSet(OclAny)
-- Bag as OrderedSet
?Bag{}->asOrderedSet()
*-> OrderedSet{} : OrderedSet(OclVoid)
?Bag{1}->asOrderedSet()
*-> OrderedSet{1} : OrderedSet(Integer)
?Bag{'1'}->asOrderedSet()
*-> OrderedSet{'1'} : OrderedSet(String)
?Bag{1, '1'}->asOrderedSet()
*-> OrderedSet{'1',1} : OrderedSet(OclAny)
-- Sequence as OrderedSet
?Sequence{}->asOrderedSet()
*-> OrderedSet{} : OrderedSet(OclVoid)
?Sequence{1}->asOrderedSet()
*-> OrderedSet{1} : OrderedSet(Integer)
?Sequence{'1'}->asOrderedSet()
*-> OrderedSet{'1'} : OrderedSet(String)
?Sequence{1, '1'}->asOrderedSet()
*-> OrderedSet{1,'1'} : OrderedSet(OclAny)
?Sequence{1, 3, 2, 1}->asOrderedSet()
*-> OrderedSet{1,3,2} : OrderedSet(Integer)
?Sequence{1, '1', '2', 4, 3}->asOrderedSet()
*-> OrderedSet{1,'1','2',4,3} : OrderedSet(OclAny)
-- OrderedSet as OrderedSet
?OrderedSet{}->asOrderedSet()
*-> OrderedSet{} : OrderedSet(OclVoid)
?OrderedSet{1}->asOrderedSet()
*-> OrderedSet{1} : OrderedSet(Integer)
?OrderedSet{'1'}->asOrderedSet()
*-> OrderedSet{'1'} : OrderedSet(String)
?OrderedSet{1, '1'}->asOrderedSet()
*-> OrderedSet{1,'1'} : OrderedSet(OclAny)
?OrderedSet{1, 3, 2, 1}->asOrderedSet()
*-> OrderedSet{1,3,2} : OrderedSet(Integer)
?OrderedSet{1, '1', '2', 4, 3}->asOrderedSet()
*-> OrderedSet{1,'1','2',4,3} : OrderedSet(OclAny)
-- #################################
-- asBag
-- #################################
-- Set as Bag
?Set{}->asBag()
*-> Bag{} : Bag(OclVoid)
?Set{1}->asBag()
*-> Bag{1} : Bag(Integer)
?Set{'1'}->asBag()
*-> Bag{'1'} : Bag(String)
?Set{1, '1'}->asBag()
*-> Bag{'1',1} : Bag(OclAny)
-- Bag as Bag
?Bag{}->asBag()
*-> Bag{} : Bag(OclVoid)
?Bag{1}->asBag()
*-> Bag{1} : Bag(Integer)
?Bag{'1'}->asBag()
*-> Bag{'1'} : Bag(String)
?Bag{1, '1'}->asBag()
*-> Bag{'1',1} : Bag(OclAny)
-- Sequence as Bag
?Sequence{}->asBag()
*-> Bag{} : Bag(OclVoid)
?Sequence{1}->asBag()
*-> Bag{1} : Bag(Integer)
?Sequence{'1'}->asBag()
*-> Bag{'1'} : Bag(String)
?Sequence{1, '1'}->asBag()
*-> Bag{'1',1} : Bag(OclAny)
?Sequence{1, 3, 2, 1}->asBag()
*-> Bag{1,1,2,3} : Bag(Integer)
?Sequence{1, '1', '2', 4, 3}->asBag()
*-> Bag{'1','2',1,3,4} : Bag(OclAny)
-- OrderedSet as Bag
?OrderedSet{}->asBag()
*-> Bag{} : Bag(OclVoid)
?OrderedSet{1}->asBag()
*-> Bag{1} : Bag(Integer)
?OrderedSet{'1'}->asBag()
*-> Bag{'1'} : Bag(String)
?OrderedSet{1, '1'}->asBag()
*-> Bag{'1',1} : Bag(OclAny)
?OrderedSet{1, 3, 2, 1}->asBag()
*-> Bag{1,2,3} : Bag(Integer)
?OrderedSet{1, '1', '2', 4, 3}->asBag()
*-> Bag{'1','2',1,3,4} : Bag(OclAny)
exit
