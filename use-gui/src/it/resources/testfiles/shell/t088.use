model TownWorld

class Town
attributes
  name:String
  x:Integer
  y:Integer
operations
  connected():Set(Town)=
    Set{west,east,north,south}->excluding(oclUndefined(Town))
  connectedPlus():Set(Town)=
    connectedPlusAux(connected())
  --connectedPlusAux(aSet:Set(Town)):Set(Town)=
  connectedPlusAux(aSet:Set(Town))=
    let oneStep=aSet.connectedPlus()->asSet() in
    if oneStep->exists(t|aSet->excludes(t))
      then connectedPlusAux(aSet->union(oneStep)) else aSet endif
end

class Country
attributes
  name:String
  xLB:Integer -- left bottom
  yLB:Integer
  xRT:Integer -- right top
  yRT:Integer
end

association liesIn between
  Town [1..*] role town
  Country [1] role country
end

association connectsWE between
  Town [0..1] role west
  Town [0..1] role east
end

association connectsNS between
  Town [0..1] role north
  Town [0..1] role south
end

constraints

context Country inv nameUnique: true

context Town inv nameUniqueInCountry: true

context Town inv xyUnique: true

context Country inv LB_leftOf_lowerThan_RT: true

context Town inv xy_fits_LB_RT: true

context Town inv connectsWE_fits_xy: true

context Town inv connectsNS_fits_xy: true
