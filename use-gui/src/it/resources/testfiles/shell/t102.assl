------------------------------------------------------------------------

procedure transition(numPerson:Integer,numChanges:Integer)
var thePersonsPre: Sequence(Person),
    thePersonsPos: Sequence(Person),
    preSnapshot: Snapshot,
    posSnapshot: Snapshot,
    theOpKind: String,
    theBirthC: birthC,
    theMarryC: marryC,
    theDivorceC: divorceC,
    theDeathC: deathC,
    thePerson: Person,
    theWife: Person,
    theHusband: Person,
    theChangeKind: String;
begin
thePersonsPre:=CreateN(Person,[numPerson]);
for i:Integer in [Sequence{1..numPerson}] begin
  [thePersonsPre->at(i)].name:=Try([Sequence{
    'Ada','Bel','Cam','Day','Eva','Flo','Gen','Hao','Ina','Jen',
    'Ali','Bob','Cyd','Dan','Eli','Fox','Gil','Hal','Ike','Jan'}]);
  [thePersonsPre->at(i)].civstat:=
    Any([Sequence{#single,#married,#divorced,#widowed}]);
  [thePersonsPre->at(i)].gender:=Try([Sequence{#female,#male}]);
  [thePersonsPre->at(i)].alive:=Try([Sequence{false,true}]); end;
------------------------------------------------------------------------
preSnapshot:=Create(Snapshot);
for i:Integer in [Sequence{1..numPerson}] begin
  Insert(SnapshotPerson,[preSnapshot],[thePersonsPre->at(i)]); end;
------------------------------------------------------------------------
thePersonsPos:=CreateN(Person,[numPerson]);
for i:Integer in [Sequence{1..numPerson}] begin
  [thePersonsPos->at(i)].name:=[thePersonsPre->at(i).name];
  [thePersonsPos->at(i)].civstat:=[thePersonsPre->at(i).civstat];
  [thePersonsPos->at(i)].gender:=[thePersonsPre->at(i).gender];
  [thePersonsPos->at(i)].alive:=[thePersonsPre->at(i).alive]; end;
------------------------------------------------------------------------
posSnapshot:=Create(Snapshot);
for i:Integer in [Sequence{1..numPerson}] begin
  Insert(SnapshotPerson,[posSnapshot],[thePersonsPos->at(i)]);
  Insert(PredSuccPerson,[thePersonsPre->at(i)],[thePersonsPos->at(i)]); end;
------------------------------------------------------------------------
theOpKind:=Try([Sequence{'birth','marry','divorce','death'}]);
if [theOpKind='birth'] then begin
  theBirthC:=Create(birthC,[preSnapshot],[posSnapshot]);
  [theBirthC].aSelf:=Try([thePersonsPre]);
  [theBirthC].aName:=Try([Sequence{
    'Ada','Bel','Cam','Day','Eva','Flo','Gen','Hao','Ina','Jen',
    'Ali','Bob','Cyd','Dan','Eli','Fox','Gil','Hal','Ike','Jan'}]);
  [theBirthC].aGender:=Try([Sequence{#female,#male}]);end;
if [theOpKind='marry'] then begin
  theMarryC:=Create(marryC,[preSnapshot],[posSnapshot]);
  [theMarryC].aSelf:=Try([thePersonsPre]);
  [theMarryC].aSpouse:=Try([thePersonsPre]);end;
if [theOpKind='divorce'] then begin
  theDivorceC:=Create(divorceC,[preSnapshot],[posSnapshot]);
  [theDivorceC].aSelf:=Try([thePersonsPre]);end;
if [theOpKind='death'] then begin
  theDeathC:=Create(deathC,[preSnapshot],[posSnapshot]);
  [theDeathC].aSelf:=Try([thePersonsPre]);end;
for i:Integer in [Sequence{1..numChanges}] begin
  theChangeKind:=
    Try([Sequence{'name','civstat','gender','alive','Marriage'}]);
  if [theChangeKind='name'] then begin
    thePerson:=Try([thePersonsPos]);
    [thePerson].name:=Try([Sequence{
      'Ada','Bel','Cam','Day','Eva','Flo','Gen','Hao','Ina','Jen',
      'Ali','Bob','Cyd','Dan','Eli','Fox','Gil','Hal','Ike','Jan'}]); end;
  if [theChangeKind='civstat'] then begin
    thePerson:=Try([thePersonsPos]);
    [thePerson].civstat:=
      Try([Sequence{#single,#married,#divorced,#widowed}]); end;
  if [theChangeKind='gender'] then begin
    thePerson:=Try([thePersonsPos]);
    [thePerson].gender:=Try([Sequence{#female,#male}]); end;
  if [theChangeKind='alive'] then begin
    thePerson:=Try([thePersonsPos]);
    [thePerson].alive:=Try([Sequence{false,true}]); end;
  if [theChangeKind='Marriage'] then begin
    theWife:=Try([thePersonsPos]);
    theHusband:=Try([thePersonsPos]);
    Insert(Marriage,[theWife],[theHusband]); end;
  end;
end;
------------------------------------------------------------------------
procedure test(numOps:Integer)
var snapshots:Sequence(Snapshot),
    op:birthC;
begin
  snapshots := CreateN(Snapshot, [numOps + 1]);
  op := Create(birthC, [snapshots->at(1)], [snapshots->at(2)]);
  -- op := Try(birtC, [snapshots], [snapshots]);
end;
