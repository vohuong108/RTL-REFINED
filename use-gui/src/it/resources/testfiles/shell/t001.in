# $ProjectHeader: use 0.393 Wed, 16 May 2007 14:10:28 +0200 opti $

# See the README file in this directory for information about the file
# format.

#
## Basic literals
#

? 42
*-> 42 : Integer

? 3.1
*-> 3.1 : Real

? 13.14
*-> 13.14 : Real

? 13e14
*-> 1.3E15 : Real

? 10e15 + 12.34E+15
*-> 2.234E16 : Real

? true
*-> true : Boolean

? false
*-> false : Boolean

? 'aString'
*-> 'aString' : String

? ''
*-> '' : String

? '\101'
*-> 'A' : String

? '\t' = '\u0009'
*-> true : Boolean

? '\''
*-> ''' : String

? oclUndefined(String)
*-> null : OclVoid

? oclUndefined(Set(String))
*-> null : OclVoid

#
## Operations on Integers and Reals
#

? 3-(8+4)*(4+5)
*-> -105 : Integer

? -(3-(8+4)*(4+5))
*-> 105 : Integer

? - - -(3-(8+4)*(4+5))
*-> 105 : Integer

? +42
*-> 42 : Integer

? ++42
*-> 42 : Integer

? +-42
*-> -42 : Integer

? 1+-2
*-> -1 : Integer

? -5
*-> -5 : Integer

? 3 / 0
*-> null : OclVoid

? 3 div 0
*-> null : OclVoid

? 10.mod(3)
*-> 1 : Integer

? 3 / 1.5
*-> 2.0 : Real

? 3.0 / 2
*-> 1.5 : Real

? 3.min(4)
*-> 3 : Integer

? 3.max(4)
*-> 4 : Integer

? 3.abs
*-> 3 : Integer

? (-3).abs
*-> 3 : Integer

? -3.abs
*-> -3 : Integer

? 3.abs + 4
*-> 7 : Integer

? 3.9.floor
*-> 3 : Integer

? 3.floor
*-> 3 : Integer

? 3.9.round
*-> 4 : Integer

? 3.round
*-> 3 : Integer

? 3 < 4
*-> true : Boolean

? 3 > 4
*-> false : Boolean

? 4 >= 4
*-> true : Boolean

? 4 <= 4
*-> true : Boolean

? 3.0 < 4
*-> true : Boolean

? 3 < 4.0
*-> true : Boolean

? 3.0 = 3
*-> true : Boolean

? 3 = 3.0
*-> true : Boolean

? 3 = oclUndefined(Integer)
*-> false : Boolean

? oclUndefined(Integer) = 3
*-> false : Boolean

? oclUndefined(Integer) = oclUndefined(Integer)
*-> true : Boolean

? oclUndefined(Real) = oclUndefined(Integer)
*-> true : Boolean

#
## Operations on Booleans
#

# not

? not true
*-> false : Boolean

? not false
*-> true : Boolean

? not oclUndefined(Boolean)
*-> null : OclVoid

? not not true
*-> true : Boolean

? not not false
*-> false : Boolean

? not not oclUndefined(Boolean)
*-> null : OclVoid

# or

? false or false
*-> false : Boolean

? false or true
*-> true : Boolean

? false or oclUndefined(Boolean)
*-> null : OclVoid

? true or false
*-> true : Boolean

? true or true
*-> true : Boolean

? true or oclUndefined(Boolean)
*-> true : Boolean

? oclUndefined(Boolean) or false
*-> null : OclVoid

? oclUndefined(Boolean) or true
*-> true : Boolean

? oclUndefined(Boolean) or oclUndefined(Boolean)
*-> null : OclVoid

# and

? false and false
*-> false : Boolean

? false and true
*-> false : Boolean

? false and oclUndefined(Boolean)
*-> false : Boolean

? true and false
*-> false : Boolean

? true and true
*-> true : Boolean

? true and oclUndefined(Boolean)
*-> null : OclVoid

? oclUndefined(Boolean) and false
*-> false : Boolean

? oclUndefined(Boolean) and true
*-> null : OclVoid

? oclUndefined(Boolean) and oclUndefined(Boolean)
*-> null : OclVoid

# xor

? false xor false
*-> false : Boolean

? false xor true
*-> true : Boolean

? false xor oclUndefined(Boolean)
*-> null : OclVoid

? true xor false
*-> true : Boolean

? true xor true
*-> false : Boolean

? true xor oclUndefined(Boolean)
*-> null : OclVoid

? oclUndefined(Boolean) xor false
*-> null : OclVoid

? oclUndefined(Boolean) xor true
*-> null : OclVoid

? oclUndefined(Boolean) xor oclUndefined(Boolean)
*-> null : OclVoid

# implies

? false implies false
*-> true : Boolean

? false implies true
*-> true : Boolean

? false implies oclUndefined(Boolean)
*-> true : Boolean

? true implies false
*-> false : Boolean

? true implies true
*-> true : Boolean

? true implies oclUndefined(Boolean)
*-> null : OclVoid

? oclUndefined(Boolean) implies false
*-> null : OclVoid

? oclUndefined(Boolean) implies true
*-> true : Boolean

? oclUndefined(Boolean) implies oclUndefined(Boolean)
*-> null : OclVoid

# misc.

? true = true
*-> true : Boolean

? true = false
*-> false : Boolean

? true = false = false
*-> true : Boolean

#
## Operations on Strings
#

? 'foo'.size
*-> 3 : Integer

? 'foo'.concat('bar')
*-> 'foobar' : String

# FIXME: add + operator for strings?
#'foo' + 'bar'
#*-> 'foobar' : String

? 'foO'.toUpper
*-> 'FOO' : String

? 'fOO'.toLower
*-> 'foo' : String

? 'foobar'.substring(2,4)
*-> 'oob' : String

? 'foobar'.substring(2,4)
*-> 'oob' : String

? 'foobar' = 'foo'
*-> false : Boolean

? 'foobar' = 'foobar'
*-> true : Boolean

? 'foobar' <> 'foobar'
*-> false : Boolean

? 'foobar' = oclUndefined(String)
*-> false : Boolean

? oclUndefined(String) = oclUndefined(String)
*-> true : Boolean

? 'foo' < 'foobar'
*-> true : Boolean

? 'foo' <= 'foobar'
*-> true : Boolean

? 'foo' > 'foobar'
*-> false : Boolean

? 'foobar' >= 'foo'
*-> true : Boolean

#
## If-then-else expressions
#

? if true then 2 else 3 endif
*-> 2 : Integer

? if false then 2 else 3 endif
*-> 3 : Integer

? if false then oclUndefined(Integer) else 3 endif
*-> 3 : Integer

? if oclUndefined(Boolean) then 2 else 3 endif
*-> null : OclVoid

? if true then 'a' else 1 endif
*-> 'a' : String 

? if true then 'a' else 1 endif + 3
* <input>:1:30: Undefined operation `OclAny.+(Integer)'.

#
## Test for (un-)definedness
#

? 3.isUndefined()
*-> false : Boolean

? (3/0).isUndefined()
*-> true : Boolean

? 3.isDefined()
*-> true : Boolean

? (3/0).isDefined()
*-> false : Boolean

#
## Collection literals
#

? Set{1, 2}
*-> Set{1,2} : Set(Integer)

? Set{1..3}
*-> Set{1,2,3} : Set(Integer)

? Set{1..3,5..9}
*-> Set{1,2,3,5,6,7,8,9} : Set(Integer)

? Set{1..3,5..6,7}
*-> Set{1,2,3,5,6,7} : Set(Integer)

? Set{1..2*2}
*-> Set{1,2,3,4} : Set(Integer)

? Set{1.3, 2.5}
*-> Set{1.3,2.5} : Set(Real)

? Set{1.0}->including(1)
*-> Set{1.0} : Set(Real)

? Set{1.3,1.2,1/5,1/8}
*-> Set{0.125,0.2,1.2,1.3} : Set(Real)

? Set{'b','a'}
*-> Set{'a','b'} : Set(String)

? Set{1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9}
*-> Set{1,2,3,4,5,6,7,8,9} : Set(Integer)

? Set{oclUndefined(Integer)}
*-> Set{null} : Set(OclVoid)

? Set{1,1 div 0}
*-> Set{null,1} : Set(Integer)

? Set{oclUndefined(Integer),1}
*-> Set{null,1} : Set(Integer)

? Set{oclUndefined(Real),1.0}
*-> Set{null,1.0} : Set(Real)

? Set{1,oclUndefined(Integer)}
*-> Set{null,1} : Set(Integer)

? Set{Set{1}, Set{2}}
*-> Set{Set{1},Set{2}} : Set(Set(Integer))

? Set{Set{1}, Set{2}, Set{2}, Set{3}}
*-> Set{Set{1},Set{2},Set{3}} : Set(Set(Integer))

? Sequence{'a','b'}
*-> Sequence{'a','b'} : Sequence(String)

? Sequence{5..8}
*-> Sequence{5,6,7,8} : Sequence(Integer)

? Sequence{3,5..8,4}
*-> Sequence{3,5,6,7,8,4} : Sequence(Integer)

? Sequence{'a','b','a'}
*-> Sequence{'a','b','a'} : Sequence(String)

? Sequence{Set{1},Set{2,3}}
*-> Sequence{Set{1},Set{2,3}} : Sequence(Set(Integer))

? Bag{1,2,2,3}
*-> Bag{1,2,2,3} : Bag(Integer)

? Bag{1,2..3,3,3..3}
*-> Bag{1,2,3,3,3} : Bag(Integer)

? Bag{Set{1}, Set{2}, Set{2}, Set{3}}
*-> Bag{Set{1},Set{2},Set{2},Set{3}} : Bag(Set(Integer))

#
## Empty collections
#

? oclEmpty(Set(Integer))
*-> Set{} : Set(OclVoid)

? Set(Integer){}
*-> Set{} : Set(OclVoid)

: Set{}
*-> Set(OclVoid)

: Set(Integer){}
*-> Set(Integer)

? oclEmpty(Set(Set(Integer)))
*-> Set{} : Set(OclVoid)

#
## Query expressions
#

? Set{1,2,3}->select(true)
*-> Set{1,2,3} : Set(Integer)

? Set{1,2,3}->select(e :  Integer | e > 1)
*-> Set{2,3} : Set(Integer)

? Set{1,2,3}->select(e | e > 1)
*-> Set{2,3} : Set(Integer)

#
## Iterate Expressions
#

? Sequence{'a','b','c'}->iterate(v1; v2 : String = '' | v2.concat(v1))
*-> 'abc' : String

? Set{1,2,3,4,5,6}->iterate(e : Integer; acc : Integer = 0 | acc + e)
*-> 21 : Integer

? Sequence{3,2,1}->iterate(e : Integer; acc : Integer = 6 | acc - e)
*-> 0 : Integer

? Bag{1,2,2,3}->iterate(e : Integer; acc : Integer = 0 | acc + e)
*-> 8 : Integer

? Set{Set{1,2},Set{2,3,4}}->iterate(e : Set(Integer); acc : Set(String) = Set{'a'} | Set{'b'})
*-> Set{'b'} : Set(String)

? Set{Set{1,2},Set{3},Set{2,3,4}}->iterate(e : Set(Integer); acc : Set(Integer) = Set{0} | acc->union(e))
*-> Set{0,1,2,3,4} : Set(Integer)

\
? Sequence{1,2,3}->iterate(
    e1, e2 : Integer;
    res : Integer = 0 |
    res + e1 * e2)
.
*-> 36 : Integer

#
## Set operations
#

# Operations inherited from Collection

? Set{1,2,3}->size()
*-> 3 : Integer

? Set{1,2,3}->includes(2)
*-> true : Boolean

? Set{1,2,3}->includes(5)
*-> false : Boolean

? Set{1,2,3}->excludes(2)
*-> false : Boolean

? Set{1,2,3}->excludes(5)
*-> true : Boolean

? Set{1,2,3}->count(1)
*-> 1 : Integer

? Set{1}->includesAll(Bag{1})
*-> true : Boolean

? Set{1.0}->includesAll(Bag{1})
*-> true : Boolean

? Set{1,2,3}->includesAll(Set{2,3})
*-> true : Boolean

? Set{1,2,3}->includesAll(Set{2,4})
*-> false : Boolean

? Set{1,2,3}->includesAll(Bag{2,2,3})
*-> true : Boolean

? Set{1,2,3}->includesAll(Sequence{3,2})
*-> true : Boolean

? Set{1,2,3}->excludesAll(Set{2,3})
*-> false : Boolean

? Set{1,2,3}->excludesAll(Set{2,4})
*-> false : Boolean

? Set{1,2,3}->excludesAll(Set{4,5})
*-> true : Boolean

? Set{1,2,3}->excludesAll(Bag{2,2,3})
*-> false : Boolean

? Set{1,2,3}->excludesAll(Sequence{3,2})
*-> false : Boolean

? Set{1,2,3}->isEmpty()
*-> false : Boolean

? oclEmpty(Set(Integer))->isEmpty()
*-> true : Boolean

? Set{1,2,3}->notEmpty()
*-> true : Boolean

? oclEmpty(Set(Integer))->notEmpty()
*-> false : Boolean

? Set{1,2,3}->sum()
*-> 6 : Integer

? Set{1.5,2.5}->sum()
*-> 4.0 : Real

? Set{1.5,2}->sum()
*-> 3.5 : Real

# Set specific operations

? Set{1} = Set{1}
*-> true : Boolean

? Set{1,2} = Set{2,1}
*-> true : Boolean

? Set{1.0,2.0} = Set{1,2}
*-> true : Boolean

? Set{1,2} = Set{1.0,2.0}
*-> true : Boolean

? Set{1,2} <> oclUndefined(Set(Integer))
*-> true : Boolean

? oclEmpty(Set(Integer)) <> oclUndefined(Set(Integer))
*-> true : Boolean

? oclUndefined(Set(Integer)) <> oclEmpty(Set(Integer))
*-> true : Boolean

: oclUndefined(Integer)
*-> Integer

: null
*-> OclVoid

: null(Integer)
*-> Integer

? Set{1.0,2.2} = Set{1,2}
*-> false : Boolean

? Set{1,2} <> Set{2,1}
*-> false : Boolean

? Set{1,2,3}->union(Set{0,2,4})
*-> Set{0,1,2,3,4} : Set(Integer)

? Set{1,2}->union(Set{1,2})
*-> Set{1,2} : Set(Integer)

? Set{1,2}->union(Bag{1,1,2,3})
*-> Bag{1,1,1,2,2,3} : Bag(Integer)

? Set{1,2,3}->intersection(Set{1,2})
*-> Set{1,2} : Set(Integer)

? Set{1,2,3}->intersection(Set{4})
*-> Set{} : Set(OclVoid)

? Set{1,2,3}->intersection(Bag{1,2})
*-> Set{1,2} : Set(Integer)

? Set{1,2,3}->intersection(Bag{1,1})
*-> Set{1} : Set(Integer)

? Set{1,2,3} - Set{2}
*-> Set{1,3} : Set(Integer)

? Set{1,2,3}->symmetricDifference(Set{2,4})
*-> Set{1,3,4} : Set(Integer)

? Set{1,2,3}->including(5)
*-> Set{1,2,3,5} : Set(Integer)

? Set{1,2,3}->including(1)
*-> Set{1,2,3} : Set(Integer)

? Set{1,2,3}->excluding(5)
*-> Set{1,2,3} : Set(Integer)

? Set{1,2,3}->excluding(1)
*-> Set{2,3} : Set(Integer)

? Set{1,2,3}->select(e | e > 1)
*-> Set{2,3} : Set(Integer)

? Set{1,2,3}->select(e | e <> 2)
*-> Set{1,3} : Set(Integer)

? Set{Set{1,2},Set{2,3,4}}->select(s | s->size > 2)
*-> Set{Set{2,3,4}} : Set(Set(Integer))

? Set{Set{2},Set{1,2},Set{2,3,4}}->select(s | s->size.mod(2) = 1)
*-> Set{Set{2},Set{2,3,4}} : Set(Set(Integer))

? Set{Set{2},Set{1,2},Set{2,3,4}}->select(s | s->size.mod(2) = 1)->size()
*-> 2 : Integer

? Set{1,2,3}->reject(e | e > 1)
*-> Set{1} : Set(Integer)

? Set{1,2,3}->reject(e | e <> 2)
*-> Set{2} : Set(Integer)

? Set{1,2,3}->collect(e | e * 2)
*-> Bag{2,4,6} : Bag(Integer)

? Set{1,2,3}->collect(1)
*-> Bag{1,1,1} : Bag(Integer)

? Set{1,2,3}->collect(e | 'abc'.substring(e,3))
*-> Bag{'abc','bc','c'} : Bag(String)

? Set{1,2,3}->asSequence()->size() = 3
*-> true : Boolean

? Set{1,2,3}->asBag()
*-> Bag{1,2,3} : Bag(Integer)

#
## Bag operations
#

# Operations inherited from Collection

? Bag{1,1,2,3}->size()
*-> 4 : Integer

? Bag{1,2,2,3}->includes(2)
*-> true : Boolean

? Bag{1,2,3}->includes(5)
*-> false : Boolean

? Bag{1,2,2,3}->excludes(2)
*-> false : Boolean

? Bag{1,2,3}->excludes(5)
*-> true : Boolean

? Bag{1,1,2,3}->count(1)
*-> 2 : Integer

? Bag{1,1,2,3}->includesAll(Bag{1,3})
*-> true : Boolean

? Bag{1,2,3}->includesAll(Bag{1,1,3})
*-> true : Boolean

? Bag{1,2,3}->includesAll(Bag{2,4})
*-> false : Boolean

? Bag{1,2,3}->includesAll(Set{2,3})
*-> true : Boolean

? Bag{1,2,3}->includesAll(Sequence{3,2})
*-> true : Boolean

? Bag{1,2,3}->excludesAll(Bag{2,3})
*-> false : Boolean

? Bag{1,2,3}->excludesAll(Bag{2,4})
*-> false : Boolean

? Bag{1,2,3}->excludesAll(Bag{4,5})
*-> true : Boolean

? Bag{1,2,3}->isEmpty()
*-> false : Boolean

? oclEmpty(Bag(Integer))->isEmpty()
*-> true : Boolean

? Bag{1,2,3}->notEmpty()
*-> true : Boolean

? oclEmpty(Bag(Integer))->notEmpty()
*-> false : Boolean

? Bag{1,1,2,3}->sum()
*-> 7 : Integer

# Bag specific operations

? Bag{1,2} = Bag{1,2}
*-> true : Boolean

? Bag{1,2} <> Bag{1,2}
*-> false : Boolean

? Bag{1,2,2} = Bag{1,2}
*-> false : Boolean

? Bag{1,2,2} <> Bag{1,2}
*-> true : Boolean

? Bag{1.0,2.0} = Bag{1,2}
*-> true : Boolean

? Bag{1,2} = Bag{1.0,2.0}
*-> true : Boolean

? Bag{1,2} <> oclUndefined(Bag(Integer))
*-> true : Boolean

? oclEmpty(Bag(Integer)) <> oclUndefined(Bag(Integer))
*-> true : Boolean

? oclUndefined(Bag(Integer)) <> oclEmpty(Bag(Integer))
*-> true : Boolean

? Bag{1,2}->union(Bag{1,2,3})
*-> Bag{1,1,2,2,3} : Bag(Integer)

? Bag{1,2}->union(Set{1,2,3})
*-> Bag{1,1,2,2,3} : Bag(Integer)

? Bag{1,2}->intersection(Bag{1,2,3})
*-> Bag{1,2} : Bag(Integer)

? Bag{1,2,2,2,3}->intersection(Bag{2,2,3})
*-> Bag{2,2,3} : Bag(Integer)

? Bag{1,2,2,2,3}->intersection(Bag{2,2,2,2,3})
*-> Bag{2,2,2,3} : Bag(Integer)

? Bag{1,2,2,2,3}->intersection(Set{2,3})
*-> Set{2,3} : Set(Integer)

? Bag{1,2,2,3}->including(2)
*-> Bag{1,2,2,2,3} : Bag(Integer)

? Bag{1,2,2,3}->including(5)
*-> Bag{1,2,2,3,5} : Bag(Integer)

? Bag{1,2,2,3}->including(oclUndefined(Integer))
*-> Bag{null,1,2,2,3} : Bag(Integer)

? Bag{1,2,2,3}->excluding(2)
*-> Bag{1,3} : Bag(Integer)

? Bag{oclUndefined(Integer),1,2,2,3}->excluding(oclUndefined(Integer))
*-> Bag{1,2,2,3} : Bag(Integer)

? Bag{1,2,2,3}->select(e | e > 1)
*-> Bag{2,2,3} : Bag(Integer)

? Bag{1,2,2,3}->reject(e | e > 1)
*-> Bag{1} : Bag(Integer)

? Bag{1,2,2,3}->collect(e | e * 2)
*-> Bag{2,4,4,6} : Bag(Integer)

? Bag{1,2,2,3}->count(2)
*-> 2 : Integer

? Bag{1,2,2,3}->asSequence()->size() = 4
*-> true : Boolean

? Bag{1,2,2,3}->asSet
*-> Set{1,2,3} : Set(Integer)

? Bag{Set{1}, Set{2}, Set{2}, Set{3}}->asSet
*-> Set{Set{1},Set{2},Set{3}} : Set(Set(Integer))

#
## Sequence operations
#

# Operations inherited from Collection

? Sequence{1,1,2,3}->size()
*-> 4 : Integer

? Sequence{1,2,2,3}->includes(2)
*-> true : Boolean

? Sequence{1,2,3}->includes(5)
*-> false : Boolean

? Sequence{1,2,2,3}->excludes(2)
*-> false : Boolean

? Sequence{1,2,3}->excludes(5)
*-> true : Boolean

? Sequence{1,1,2,3}->count(1)
*-> 2 : Integer

? Sequence{1,1,2,3}->includesAll(Sequence{1,3})
*-> true : Boolean

? Sequence{1,2,3}->includesAll(Sequence{1,1,3})
*-> true : Boolean

? Sequence{1,2,3}->includesAll(Sequence{2,4})
*-> false : Boolean

? Sequence{1,2,3}->includesAll(Set{2,3})
*-> true : Boolean

? Sequence{1,2,3}->includesAll(Sequence{3,2})
*-> true : Boolean

? Sequence{1,2,2}->includesAll(Bag{2,2})
*-> true : Boolean

? Sequence{1,2,3}->excludesAll(Sequence{2,3})
*-> false : Boolean

? Sequence{1,2,3}->excludesAll(Sequence{2,4})
*-> false : Boolean

? Sequence{1,2,3}->excludesAll(Sequence{4,5})
*-> true : Boolean

? Sequence{1,2,3}->isEmpty()
*-> false : Boolean

? oclEmpty(Sequence(Integer))->isEmpty()
*-> true : Boolean

? Sequence{1,2,3}->notEmpty()
*-> true : Boolean

? oclEmpty(Sequence(Integer))->notEmpty()
*-> false : Boolean

? Sequence{1,1,2,3}->sum()
*-> 7 : Integer

# Sequence specific operations

? Sequence{1,2} = Sequence{1,2}
*-> true : Boolean

? Sequence{1,2} <> Sequence{1,2}
*-> false : Boolean

? Sequence{1,2} = Sequence{2,1}
*-> false : Boolean

? Sequence{1,2} <> Sequence{2,1}
*-> true : Boolean

? Sequence{1.0,2.0} = Sequence{1,2}
*-> true : Boolean

? Sequence{1,2} = Sequence{1.0,2.0}
*-> true : Boolean

? Sequence{1,2} <> oclUndefined(Sequence(Integer))
*-> true : Boolean

? oclEmpty(Sequence(Integer)) <> oclUndefined(Sequence(Integer))
*-> true : Boolean

? oclUndefined(Sequence(Integer)) <> oclEmpty(Sequence(Integer))
*-> true : Boolean

? Sequence{1,2}->union(Sequence{2,1})
*-> Sequence{1,2,2,1} : Sequence(Integer)

? Sequence{1,2}->union(Sequence{3,4})
*-> Sequence{1,2,3,4} : Sequence(Integer)

? Sequence{1,2,3}->append(0)
*-> Sequence{1,2,3,0} : Sequence(Integer)

? Sequence{1,2,3}->prepend(4)
*-> Sequence{4,1,2,3} : Sequence(Integer)

? Sequence{3,2,1}->subSequence(1,3)
*-> Sequence{3,2,1} : Sequence(Integer)

? Sequence{3,2,1}->subSequence(2,3)
*-> Sequence{2,1} : Sequence(Integer)

? Sequence{3,2,1}->subSequence(0,3)
*-> null : OclVoid

? Sequence{1,2,3}->at(1)
*-> 1 : Integer

? Sequence{1,2,3}->at(2)
*-> 2 : Integer

? Sequence{1,2,3}->at(3)
*-> 3 : Integer

? Sequence{1,2,3}->first
*-> 1 : Integer

? oclEmpty(Sequence(Integer))->first
*-> null : OclVoid

? Sequence{1,2,3}->last
*-> 3 : Integer

? oclEmpty(Sequence(Integer))->last
*-> null : OclVoid

? Sequence{1,2,3}->including(0)
*-> Sequence{1,2,3,0} : Sequence(Integer)

? Sequence{1,2,2,1,3,1}->excluding(1)
*-> Sequence{2,2,3} : Sequence(Integer)

? Sequence{1,2,2,1,3,1}->excluding(5)
*-> Sequence{1,2,2,1,3,1} : Sequence(Integer)

? Sequence{1,2,2,3}->select(e | e > 1)
*-> Sequence{2,2,3} : Sequence(Integer)

? Sequence{1,2,2,3}->reject(e | e > 1)
*-> Sequence{1} : Sequence(Integer)

? Sequence{1,2,2,3}->collect(e | e * 2)
*-> Sequence{2,4,4,6} : Sequence(Integer)

? Sequence{1,2,2,3}->asBag
*-> Bag{1,2,2,3} : Bag(Integer)

? Sequence{1,2,2,3}->asSet
*-> Set{1,2,3} : Set(Integer)

? Sequence{}->insertAt(1, 'Z')
*-> Sequence{'Z'} : Sequence(String)

? Sequence{'A','B'}->insertAt(1, 'Z')
*-> Sequence{'Z','A','B'} : Sequence(String)

? Sequence{'A','B'}->insertAt(2, 'Z')
*-> Sequence{'A','Z','B'} : Sequence(String)

? Sequence{'A','B'}->insertAt(3, 'Z')
*-> Sequence{'A','B','Z'} : Sequence(String)

? Sequence{'A','B'}->insertAt(4, 'Z')
*-> null : OclVoid

? Sequence{'A','B'}->insertAt(0, 'Z')
*-> null : OclVoid

#
## Flattening
#

? Bag{Set{1}, Set{2}, Set{2}, Set{3}}->flatten
*-> Bag{1,2,2,3} : Bag(Integer)

? Bag{Bag{1,1}, Bag{2,1}, Bag{1,2,3}}->flatten
*-> Bag{1,1,1,1,2,2,3} : Bag(Integer)

? Bag{oclUndefined(Bag(Integer))}->flatten
*-> Bag{null} : Bag(OclVoid)

? Bag{Sequence{1,2}, Sequence{2,1}, Sequence{2,3}}->flatten
*-> Bag{1,1,2,2,2,3} : Bag(Integer)

? Bag{oclUndefined(Sequence(Integer))}->flatten
*-> Bag{null} : Bag(OclVoid)

? Set{Set{1}, Set{2}, Set{2}, Set{3}}->flatten
*-> Set{1,2,3} : Set(Integer)

? Set{Bag{1,1}, Bag{2,1}, Bag{1,2,3}}->flatten
*-> Set{1,2,3} : Set(Integer)

? Set{Sequence{1,2}, Sequence{2,1}, Sequence{2,3}}->flatten
*-> Set{1,2,3} : Set(Integer)

? Sequence{Sequence{1,2}, Sequence{2,1}, Sequence{2,3}}->flatten
*-> Sequence{1,2,2,1,2,3} : Sequence(Integer)

#
## Collection type
#

? Sequence{Set{1,2},Set{2,1}}->forAll(s : Collection(Integer) | s = Set{1,2})
*-> true : Boolean


#
## Exists and forAll on collections
#

? Set{1,2,3,4,5,6}->exists(e | e > 0)
*-> true : Boolean

? Set{1,2,3,4,5,6}->exists(e | e = 7)
*-> false : Boolean

? Set{1,2,3,4,5,6}->forAll(e | e > 0)
*-> true : Boolean

? Set{1,2,3,4,5,6}->forAll(e | e > 1)
*-> false : Boolean

? Sequence{1,2,3,4,5,6}->exists(e | e > 0)
*-> true : Boolean

? Sequence{1,2,3,4,5,6}->exists(e | e = 7)
*-> false : Boolean

? Sequence{1,2,3,4,5,6}->forAll(e | e > 0)
*-> true : Boolean

? Sequence{1,2,3,4,5,6}->forAll(e | e > 1)
*-> false : Boolean

? Bag{1,2,3,4,5,6}->exists(e | e > 0)
*-> true : Boolean

? Bag{1,2,3,4,5,6}->exists(e | e = 7)
*-> false : Boolean

? Bag{1,2,3,4,5,6}->forAll(e | e > 0)
*-> true : Boolean

? Bag{1,2,3,4,5,6}->forAll(e | e > 1)
*-> false : Boolean

#
## isUnique on collections
#

? Set{1,2,3,4,5,6}->isUnique(e | e)
*-> true : Boolean

? Set{1,2,3,4,5,6}->isUnique(e | Set{e})
*-> true : Boolean

? Set{1,2,3,4,5,6}->isUnique(e | e.mod(2))
*-> false : Boolean

? Set{Set{1},Set{2}}->isUnique(e | e)
*-> true : Boolean

? Sequence{1,2}->isUnique(e | e)
*-> true : Boolean

? Sequence{1,2,1}->isUnique(e | e)
*-> false : Boolean

? Bag{1,1}->isUnique(e | e)
*-> false : Boolean

? Bag{1,2,3}->isUnique(e | e)
*-> true : Boolean

? Bag{1 div 0,1}->isUnique(e | e)
*-> true : Boolean

? Bag{1 div 0,1 div 0}->isUnique(e | e)
*-> false : Boolean

? Bag{Set{1},Set{1}}->isUnique(e | e)
*-> false : Boolean

#
## sortedBy
#

? Set{4,2,3,1,6,5}->sortedBy(e | e)
*-> OrderedSet{1,2,3,4,5,6} : OrderedSet(Integer)

? Set{4,2,3,1,6,5}->sortedBy(1)->includesAll(Set{4,2,3,1,6,5})
*-> true : Boolean

? Set{'c','ca','cc','a','aa'}->sortedBy(e | e)
*-> OrderedSet{'a','aa','c','ca','cc'} : OrderedSet(String)

? Set{'c','ca','cc','a','aa'}->sortedBy(e | e)->sortedBy(e | e.size())
*-> OrderedSet{'a','c','aa','ca','cc'} : OrderedSet(String)

? Bag{4,4,2,3,1,4,6,1,5}->sortedBy(e | e)
*-> Sequence{1,1,2,3,4,4,4,5,6} : Sequence(Integer)

? Bag{4,4,2,3,1,4,6,1,5}->sortedBy(1)->includesAll(Bag{4,4,2,3,1,4,6,1,5})
*-> true : Boolean

? Bag{'c','aa','ca','cc','a','aa'}->sortedBy(e | e)
*-> Sequence{'a','aa','aa','c','ca','cc'} : Sequence(String)

? Sequence{4,4,2,3,1,4,6,1,5}->sortedBy(e | e)
*-> Sequence{1,1,2,3,4,4,4,5,6} : Sequence(Integer)

? Sequence{4,4,2,3,1,4,6,1,5}->sortedBy(1)->includesAll(Sequence{4,4,2,3,1,4,6,1,5})
*-> true : Boolean

? Sequence{'c','aa','ca','cc','a','aa'}->sortedBy(e | e)
*-> Sequence{'a','aa','aa','c','ca','cc'} : Sequence(String)

#
## one
#

? Set{4,2,3,1,6,5}->one(e | e = 2)
*-> true : Boolean

? Set{4,2,3,1,6,5}->one(e | e = 7)
*-> false : Boolean

? Set{1..9}->one(e1,e2| e1 = e2 and e1 * e2 = 9)
*-> true : Boolean

? Set{1..9}->one(e1,e2| e1 * e2 = 9)
*-> false : Boolean

? oclEmpty(Set(Integer))->one(e | e = 2)
*-> false : Boolean

#
## any
#

? Set{1,2}->any(e | e < 2)
*-> 1 : Integer

? Set{1,2}->any(e | e < 1)
*-> null : OclVoid

? Set{1,2}->any(e | e < 3) < 3
*-> true : Boolean

? Sequence{3,2,1,2,3}->any(e | e < 2)
*-> 1 : Integer

? Sequence{3,2,1,2,3}->any(e | e < 1)
*-> null : OclVoid

? Sequence{3,2,1,2,3}->any(e | e < 3) < 3
*-> true : Boolean

#
## reverse
#
?let s:Sequence(Integer) = null in s->reverse()
*-> null : OclVoid

?let s:Sequence(Integer) = Sequence{} in s->reverse()
*-> Sequence{} : Sequence(OclVoid)

?let s:Sequence(Integer) = Sequence{1} in s->reverse()
*-> Sequence{1} : Sequence(Integer)

?let s:Sequence(Integer) = Sequence{1,2,3} in s->reverse()
*-> Sequence{3,2,1} : Sequence(Integer)

?let s:Sequence(Integer) = Sequence{1,3,2} in s->reverse()
*-> Sequence{2,3,1} : Sequence(Integer)

?let s:Sequence(Integer) = Sequence{3,1,2} in s->reverse()
*-> Sequence{2,1,3} : Sequence(Integer)

?let s:OrderedSet(Integer) = null in s->reverse()
*-> null : OclVoid

?let s:OrderedSet(Integer) = OrderedSet{} in s->reverse()
*-> OrderedSet{} : OrderedSet(OclVoid)

?let s:OrderedSet(Integer) = OrderedSet{1} in s->reverse()
*-> OrderedSet{1} : OrderedSet(Integer)

?let s:OrderedSet(Integer) = OrderedSet{1,2,3} in s->reverse()
*-> OrderedSet{3,2,1} : OrderedSet(Integer)

?let s:OrderedSet(Integer) = OrderedSet{1,3,2} in s->reverse()
*-> OrderedSet{2,3,1} : OrderedSet(Integer)

?let s:OrderedSet(Integer) = OrderedSet{3,1,2} in s->reverse()
*-> OrderedSet{2,1,3} : OrderedSet(Integer)

#
## Nested Iterate Expressions
#

# nested sum

\
? Set{Set{1,2},Set{2,3,4}}->iterate(
    e1 :  Set(Integer); 
    acc1 : Integer = 0 | 
    e1->iterate(
        e2 : Integer; 
        acc2 : Integer = 0 | 
        acc2 + e2) + acc1)
.
*-> 12 : Integer

# flattening

\
? Bag{Set{3,2},Set{1,2,4}}->iterate(e1 : Set(Integer); 
  acc1 : Bag(Integer) = oclEmpty(Bag(Integer))
  | e1->iterate(v : Integer; 
    acc2 : Bag(Integer) = acc1
    | acc2->including(v)))
.
*-> Bag{1,2,2,3,4} : Bag(Integer)


#
## Cartesian Product
#

\
? Set{1,2,3}->iterate(
    e1 : Integer; 
    s : Set(Sequence(Integer)) = oclEmpty(Set(Sequence(Integer))) | 
    s->union(Set{4,5,6}->iterate(
        e2 : Integer; 
        s2 : Set(Sequence(Integer)) = oclEmpty(Set(Sequence(Integer))) | 
        s2->including(Sequence{e1, e2}))))
.
*-> Set{Sequence{1,4},Sequence{1,5},Sequence{1,6},Sequence{2,4},Sequence{2,5},Sequence{2,6},Sequence{3,4},Sequence{3,5},Sequence{3,6}} : Set(Sequence(Integer))

#
## Transitive Closure (Warshall's algorithm)
#

# M = Set{1,2,3} 
# Relation R subseteq M x M = Set{Sequence{1,2}, Sequence{2,3}}
# Result R* = Set{Sequence{1,2},Sequence{1,3},Sequence{2,3}}
\
? Set{1,2,3}->iterate(
    e3 : Integer; 
    s3 : Set(Sequence(Integer)) = Set{Sequence{1,2}, Sequence{2,3}} | 
    Set{1,2,3}->iterate(
        e2 : Integer; 
        s2 : Set(Sequence(Integer)) = s3 | 
        Set{1,2,3}->iterate(
            e1 : Integer; 
            s1 : Set(Sequence(Integer)) = s2 | 
            if s1->exists(p1 : Sequence(Integer) | 
                s1->exists(p2 : Sequence(Integer) | 
                    (p1->at(1) = e1 and p1->at(2) = e2) or
                    (p1->at(1) = e1 and p1->at(2) = e3 and
                     p2->at(1) = e3 and p2->at(2) = e2)
                ))
            then
                s1->including(Sequence{e1,e2})
            else 
                s1
            endif)))
.
*-> Set{Sequence{1,2},Sequence{1,3},Sequence{2,3}} : Set(Sequence(Integer))


\
? Set{1,2,3,4}->iterate(
    e3 : Integer; 
    s3 : Set(Sequence(Integer)) = Set{Sequence{1,2}, Sequence{2,3}, Sequence{3,4}} | 
    Set{1,2,3,4}->iterate(
        e2 : Integer; 
        s2 : Set(Sequence(Integer)) = s3 | 
        Set{1,2,3,4}->iterate(
            e1 : Integer; 
            s1 : Set(Sequence(Integer)) = s2 | 
            if s1->exists(p1 : Sequence(Integer) | 
                s1->exists(p2 : Sequence(Integer) | 
                    (p1->at(1) = e1 and p1->at(2) = e2) or
                    (p1->at(1) = e1 and p1->at(2) = e3 and
                     p2->at(1) = e3 and p2->at(2) = e2)
                ))
            then
                s1->including(Sequence{e1,e2})
            else 
                s1
            endif)))->size()
.
*-> 6 : Integer

#
## Sorting a sequence
#
\
? Sequence{2,4,6,3}->iterate(
    e1 : Integer;
    res1 : Sequence(Integer) = oclEmpty(Sequence(Integer)) |
    if res1->isEmpty then
      Sequence{e1}
    else
      if res1->last <= e1 then
        res1->append(e1)
      else
        res1->iterate(
          e2 : Integer;
          res2 : Sequence(Integer) = oclEmpty(Sequence(Integer)) |
          if e1 < e2 and res2->forAll(e3:Integer | e1 >= e3 ) then
            res2->append(e1)->append(e2)
          else
            res2->append(e2)
          endif
        )
      endif
    endif
  )
.
*-> Sequence{2,3,4,6} : Sequence(Integer)


#
## let-expressions
#

? let x = 1 in x+x
*-> 2 : Integer

? let x : Integer = 1 in x+x
*-> 2 : Integer

? let x : OclAny = 1 in Set{x}
*-> Set{1} : Set(Integer)

? let x = 1 in let y = 2 in x+y
*-> 3 : Integer

? let x = 1 in (let y = 2 in x+y)
*-> 3 : Integer

? 1 + (let x = let y = 2 in y*3 in x)
*-> 7 : Integer

? let x=1 in let x=2 in let x=3 in x
*-> 3 : Integer

#
## type operations
#
? 42.oclIsKindOf(OclVoid)
*-> false : Boolean

? '123'.oclIsKindOf(OclVoid)
*-> false : Boolean

? 42.0.oclIsKindOf(OclVoid)
*-> false : Boolean

? true.oclIsKindOf(OclVoid)
*-> false : Boolean

? Set{1}->oclIsKindOf(Set(OclAny))
*-> true : Boolean

?Set{1}->oclIsTypeOf(Set(OclAny))
*-> false : Boolean

?Set{1}->oclIsKindOf(Set(String))
*-> false : Boolean

?Set{1}.oclIsKindOf(Set(String))
*-> Bag{false} : Bag(Boolean)

?Set{1}.oclIsKindOf(String)
*-> Bag{false} : Bag(Boolean)

?Set{1,'a'}.oclIsKindOf(String)
*-> Bag{false,true} : Bag(Boolean)

?1->oclIsKindOf(Integer)
*<input>:1:3: Warning: application of `oclIsKindOf' to a single value should be done with `.' instead of `->'.
*-> true : Boolean

?1.oclIsKindOf(Real)
*-> true : Boolean

?1.oclIsKindOf(Set(Integer))
*-> false : Boolean

?let s:Collection(Integer) = Set{1} in s.oclAsType(Set(Integer))
*<input>:1:50: Target type `Set(Integer)' is not a subtype of the source expression's type `Integer'.

?let s:Collection(Integer) = Set{1} in s->oclAsType(Set(Integer))
*-> Set{1} : Set(Integer)

?let s:Collection(Integer) = Set{1} in s->oclAsType(Set(OclAny))
*<input>:1:51: Target type `Set(OclAny)' is not a subtype of the source expression's type `Collection(Integer)'.

?let s:Collection(OclAny) = Set{1} in s->oclAsType(Set(OclAny))
*-> Set{1} : Set(Integer)

:let s:Collection(OclAny) = Set{1} in s->oclAsType(Set(OclAny))
*-> Set(OclAny)

# Issue 0000133
?Sequence{Set{7,8},Set{7},Set{}->excluding(0)}
*-> Sequence{Set{7,8},Set{7},Set{}} : Sequence(Set(Integer))

?Set{oclEmpty(Set(OclAny)),Set{9}}
*-> Set{Set{},Set{9}} : Set(Set(Integer))

?null->including(42)
*-> Bag{42} : Bag(Integer)

?let a=2, b=3 in a + b
*-> 5 : Integer
exit
